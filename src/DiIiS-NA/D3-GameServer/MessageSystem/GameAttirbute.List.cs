//Blizzless Project 2022 
using System;
//Blizzless Project 2022 
using System.Collections.Generic;
//Blizzless Project 2022 
using System.Linq;
//Blizzless Project 2022 
using System.Text;
//Blizzless Project 2022 
using System.Threading.Tasks;

namespace DiIiS_NA.GameServer.MessageSystem
{
    public partial class GameAttribute
    {
        public static readonly GameAttribute[] Attributes;

        static GameAttribute()
        {
            Attributes = typeof(GameAttribute).GetFields()
                .Where(a =>
                       a.IsStatic &&
                       a.FieldType.Name is "GameAttributeI" or "GameAttributeF" or "GameAttributeB")
                .Select(a => a.GetValue(null) as GameAttribute)
                .OrderBy(a => a.Id)
                .ToArray();

            ScriptedAttributeInitializer.ProcessAttributes(Attributes);
        }
        #region 2.7.4
        //*
        public static readonly GameAttributeF Axe_Bad_Data = new(0, 0, -1, 0, 0, "", "", "Axe_Bad_Data", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Attribute_Timer = new(1, 0, -1, 0, 0, "", "", "Attribute_Timer", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Attribute_Pool = new(2, 0, -1, 0, 0, "", "", "Attribute_Pool", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Death_Count = new(3, 0, -1, 0, 0, "", "", "Death_Count", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Respawn_Game_Time = new(7, 0, -1, 0, 0, "", "", "Respawn_Game_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Strength = new(10, 0, -1, 0, 0, "", "", "Strength", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Dexterity = new(11, 0, -1, 0, 0, "", "", "Dexterity", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Intelligence = new(12, 0, -1, 0, 0, "", "", "Intelligence", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Vitality = new(13, 0, -1, 0, 0, "", "", "Vitality", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Strength_Total = new(14, 0, -1, 0, 0, "((Strength  +  Stats_All_Bonus + Strength_Bonus + ((Strength_Item + Cube_Enchanted_Strength_Item) * Core_Attributes_From_Item_Bonus_Multiplier)) * (1 + Strength_Bonus_Percent)) * (1-Strength_Reduction_Percent)", "", "Strength_Total", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Dexterity_Total = new(15, 0, -1, 0, 0, "((Dexterity + Stats_All_Bonus + Dexterity_Bonus + ((Dexterity_Item + Cube_Enchanted_Dexterity_Item) * Core_Attributes_From_Item_Bonus_Multiplier)) * (1 + Dexterity_Bonus_Percent)) * (1-Dexterity_Reduction_Percent)", "", "Dexterity_Total", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Intelligence_Total = new(16, 0, -1, 0, 0, "((Intelligence + Stats_All_Bonus + Intelligence_Bonus + ((Intelligence_Item + Cube_Enchanted_Intelligence_Item) * Core_Attributes_From_Item_Bonus_Multiplier)) * (1 + Intelligence_Bonus_Percent)) * (1-Intelligence_Reduction_Percent)", "", "Intelligence_Total", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Vitality_Total = new(17, 0, -1, 0, 0, "((Vitality + Stats_All_Bonus + Vitality_Bonus + ((Vitality_Item + Cube_Enchanted_Vitality_Item) * Core_Attributes_From_Item_Bonus_Multiplier)) * (1 + Vitality_Bonus_Percent)) * (1-Vitality_Reduction_Percent)", "", "Vitality_Total", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Armor = new(31, 0, -1, 0, 0, "", "", "Armor", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Armor_Bonus_Percent = new(32, 0, -1, 0, 0, "", "", "Armor_Bonus_Percent", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Armor_Item = new(33, 0, -1, 0, 0, "", "0", "Armor_Item", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Armor_Bonus_Item = new(34, 0, -1, 0, 0, "", "", "Armor_Bonus_Item", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Armor_Item_Percent = new(35, 0, -1, 0, 0, "", "0", "Armor_Item_Percent", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Armor_Item_SubTotal = new(36, 0, -1, 0, 0, "FLOOR((Armor_Item + Armor_Bonus_Item) * (Armor_Item_Percent + 1))", "", "Armor_Item_SubTotal", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Armor_Item_Total = new(37, 0, -1, 0, 0, "(Armor_Item > 0)?(Max(Armor_Item_SubTotal,  1)):Armor_Item_SubTotal", "", "Armor_Item_Total", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Armor_Total = new(38, 0, -1, 0, 0, "FLOOR((Armor + Armor_Item_Total + Strength_Total + Dexterity_Total) * (Armor_Bonus_Percent + 1))", "", "Armor_Total", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Experience_Granted_Hi = new(39, 0, -1, 0, 1, "", "", "Experience_Granted_Hi", GameAttributeEncoding.Float32, 1, 0, 0, 32);
        public static readonly GameAttributeF Experience_Granted_Low = new(40, 0, -1, 0, 1, "", "", "Experience_Granted_Low", GameAttributeEncoding.Float32, 1, 0, 0, 32);
        public static readonly GameAttributeI Experience_Next_Hi = new(41, 0, -1, 0, 1, "", "", "Experience_Next_Hi", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI Experience_Next_Lo = new(42, 0, -1, 0, 1, "", "", "Experience_Next_Lo", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI Alt_Experience_Next_Hi = new(43, 0, -1, 0, 0, "", "", "Alt_Experience_Next_Hi", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI Alt_Experience_Next_Lo = new(44, 0, -1, 0, 0, "", "", "Alt_Experience_Next_Lo", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI Rest_Experience_Hi = new(45, 0, -1, 0, 0, "", "", "Rest_Experience_Hi", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI Rest_Experience_Lo = new(46, 0, -1, 0, 0, "", "", "Rest_Experience_Lo", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI Gold_Granted = new(48, 0, -1, 0, 1, "", "", "Gold_Granted", GameAttributeEncoding.Int, 136, 0, 0, 32);
        public static readonly GameAttributeI Gold = new(49, 0, -1, 0, 1, "", "", "Gold", GameAttributeEncoding.Int, 136, 0, 0, 32);
        public static readonly GameAttributeF Gold_Find = new(50, 0, -1, 0, 0, "", "", "Gold_Find", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Gold_Find_Uncapped = new(51, 0, -1, 0, 0, "", "", "Gold_Find_Uncapped", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Gold_Find_Handicap = new(52, 0, -1, 0, 0, "", "", "Gold_Find_Handicap", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Gold_Find_Alt_Levels_Total = new(53, 0, -1, 0, 0, "Alt_Level * 0.00", "", "Gold_Find_Alt_Levels_Total", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Gold_Find_Total = new(56, 0, -1, 0, 0, "((1.0 + Gold_Find_Uncapped + Gold_Find_Alt_Levels_Total + Gold_Find + Gold_Find_Community_Buff + Gold_Find_Potion_Buff) * (1.0 + Gold_Find_Handicap))-1.0", "", "Gold_Find_Total", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Magic_Find = new(60, 0, -1, 0, 0, "", "", "Magic_Find", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Magic_Find_Uncapped = new(61, 0, -1, 0, 0, "", "", "Magic_Find_Uncapped", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Magic_Find_Handicap = new(62, 0, -1, 0, 0, "", "", "Magic_Find_Handicap", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Magic_Find_Alt_Levels_Total = new(63, 0, -1, 0, 0, "Alt_Level * 0.00", "", "Magic_Find_Alt_Levels_Total", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Magic_Find_Capped_Subtotal = new(64, 0, -1, 0, 0, "Min((Magic_Find_Alt_Levels_Total + Magic_Find), 3.0)", "", "Magic_Find_Capped_Subtotal", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Magic_Find_Total = new(65, 0, -1, 0, 0, "Magic_Find_Uncapped + Magic_Find_Handicap + Magic_Find_Capped_Subtotal", "", "Magic_Find_Total", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Experience_Bonus_Percent_Total = new(80, 0, -1, 0, 0, "Experience_Bonus_Percent * Experience_Bonus_Percent_Handicap", "", "Experience_Bonus_Percent_Total", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Health_Globe_Bonus_Health = new(86, 0, -1, 0, 0, "", "", "Health_Globe_Bonus_Health", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Loading_Player_ACD = new(107, -1, -1, 0, 0, "", "", "Loading_Player_ACD", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Loading_Power_SNO = new(108, -1, -1, 0, 0, "", "", "Loading_Power_SNO", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Loading_Anim_Tag = new(109, -1, -1, 0, 0, "", "", "Loading_Anim_Tag", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Hitpoints_Cur = new(115, 0, -1, 0, 0, "Min(Hitpoints_Cur.Agg, Hitpoints_Max_Total)", "", "Hitpoints_Cur", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Hitpoints_Granted = new(120, 0, -1, 0, 0, "", "", "Hitpoints_Granted", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Hitpoints_Max_Total = new(124, 0, -1, 0, 0, "Max((Hitpoints_Max + Hitpoints_Total_From_Level + Hitpoints_Total_From_Vitality + Hitpoints_Max_Bonus) * (Hitpoints_Max_Percent_Bonus + Hitpoints_Max_Percent_Bonus_Item + 1) * (Hitpoints_Max_Percent_Bonus_Multiplicative), 1)", "", "Hitpoints_Max_Total", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Hitpoints_Regen_Per_Second_Subtotal = new(130, 0, -1, 0, 0, "(Hitpoints_Regen_Per_Second + Hitpoints_Regen_Per_Second_Bonus) * (1 + Hitpoints_Regen_Bonus_Percent)", "", "Hitpoints_Regen_Per_Second_Subtotal", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Hitpoints_Regen_Per_Second_Total = new(133, 0, -1, 0, 0, "((Hitpoints_Regen_Per_Second_Subtotal + (Hitpoints_Regen_Per_Second_Bonus_From_Skills * (1 + Hitpoints_Regen_Bonus_Percent))) * Pin(1-Hitpoints_Regen_Reduction_Percent, 0, 1)) + Hitpoints_Regen_Per_Second_Health_Globe", "", "Hitpoints_Regen_Per_Second_Total", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Hitpoints_Max_Percent_Bonus = new(134, 0, -1, 0, 0, "", "", "Hitpoints_Max_Percent_Bonus", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Hitpoints_Max_Percent_Bonus_Multiplicative = new(136, 1065353216, -1, 0, 0, "", "", "Hitpoints_Max_Percent_Bonus_Multiplicative", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF DOT_Damage_Taken_Queued = new(140, 0, -1, 0, 0, "", "", "DOT_Damage_Taken_Queued", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF DOT_Damage_Taken_Queued_Tick = new(141, 0, -1, 0, 0, "", "", "DOT_Damage_Taken_Queued_Tick", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF DOT_Damage_Taken_Queued_Player = new(142, 0, -1, 0, 0, "", "", "DOT_Damage_Taken_Queued_Player", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF DOT_Damage_Taken_Queued_Player_Tick = new(143, 0, -1, 0, 0, "", "", "DOT_Damage_Taken_Queued_Player_Tick", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Healing_Received_Queued = new(144, 0, -1, 0, 0, "", "", "Healing_Received_Queued", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Healing_Received_Queued_Tick = new(145, 0, -1, 0, 0, "", "", "Healing_Received_Queued_Tick", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Staggered_Damage_Fraction = new(146, 0, -1, 0, 0, "", "", "Staggered_Damage_Fraction", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Staggered_Damage_Duration = new(147, 0, -1, 0, 0, "", "", "Staggered_Damage_Duration", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Resource_Cur = new(150, 0, 10, 0, 0, "Max(Resource_Cur.Agg, 0)", "", "Resource_Cur", GameAttributeEncoding.Float32, 128, 0, 0, 32);
        public static readonly GameAttributeF Resource_Max_Total = new(153, 0, 10, 0, 0, "", "Max((Resource_Max + ((Level#NONE - 1) * Resource_Factor_Level) + Resource_Max_Bonus) * (Resource_Max_Percent_Bonus + 1),  0)", "Resource_Max_Total", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Movement_Scalar_Total = new(185, 0, -1, 0, 0, "Movement_Scalar_Capped_Total + Movement_Scalar_Uncapped_Bonus", "", "Movement_Scalar_Total", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Movement_Scalar_Cap = new(187, 0, -1, 0, 0, "", "", "Movement_Scalar_Cap", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Attacks_Per_Second_Item = new(194, 0, -1, 0, 0, "", "0", "Attacks_Per_Second_Item", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Attacks_Per_Second_Item_Percent = new(195, 0, -1, 0, 0, "", "0", "Attacks_Per_Second_Item_Percent", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Attacks_Per_Second_Item_Subtotal = new(196, 0, -1, 0, 0, "Attacks_Per_Second_Item * (1 + Attacks_Per_Second_Item_Percent)", "0", "Attacks_Per_Second_Item_Subtotal", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Attacks_Per_Second_Item_Bonus = new(197, 0, -1, 0, 0, "", "", "Attacks_Per_Second_Item_Bonus", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Attacks_Per_Second_Item_Total = new(198, 0, -1, 0, 0, "(Attacks_Per_Second_Item_Subtotal + Attacks_Per_Second_Item_Bonus)", "", "Attacks_Per_Second_Item_Total", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Attacks_Per_Second = new(199, 0, -1, 0, 0, "", "", "Attacks_Per_Second", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Attacks_Per_Second_Bonus = new(200, 0, -1, 0, 0, "", "", "Attacks_Per_Second_Bonus", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Attacks_Per_Second_Total = new(201, 0, -1, 0, 0, "Min(5.0,  Max(0.01,  (((Attacks_Per_Second_Item_CurrentHand > 0.0) ? Attacks_Per_Second_Item_CurrentHand : Attacks_Per_Second) + Attacks_Per_Second_Bonus + Attacks_Per_Second_Item_Bonus) * Attacks_Per_Second_Percent_Subtotal))", "", "Attacks_Per_Second_Total", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Attacks_Per_Second_Percent_Cap = new(202, 0, -1, 0, 0, "", "", "Attacks_Per_Second_Percent_Cap", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Attacks_Per_Second_Percent = new(203, 0, -1, 0, 0, "", "", "Attacks_Per_Second_Percent", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Attacks_Per_Second_Percent_Uncapped = new(204, 0, -1, 0, 0, "", "", "Attacks_Per_Second_Percent_Uncapped", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Attacks_Per_Second_Percent_Reduction = new(205, 0, -1, 0, 0, "", "", "Attacks_Per_Second_Percent_Reduction", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Attacks_Per_Second_Percent_Subtotal = new(206, 0, -1, 0, 0, "Max(0.1, (1 + (Min(Attacks_Per_Second_Percent_Cap, Attacks_Per_Second_Percent)) + Attacks_Per_Second_Percent_Uncapped) * (1-Attacks_Per_Second_Percent_Reduction))", "", "Attacks_Per_Second_Percent_Subtotal", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Damage_Delta_Total = new(213, 0, -1, 0, 0, "Max(Damage_Delta-Damage_Bonus_Min + Damage_Weapon_Delta_Total_CurrentHand, 0)", "", "Damage_Delta_Total", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Min = new(214, 0, -1, 0, 0, "", "", "Damage_Min", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Bonus_Min = new(215, 0, -1, 0, 0, "", "", "Damage_Bonus_Min", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Min_Total = new(216, 0, -1, 0, 0, "Damage_Min_Subtotal", "", "Damage_Min_Total", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Delta_Total_All = new(217, 0, -1, 0, 0, "", "", "Damage_Delta_Total_All", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Min_Total_All = new(218, 0, -1, 0, 0, "", "", "Damage_Min_Total_All", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Average_Total_All = new(219, 0, -1, 0, 0, "", "", "Damage_Average_Total_All", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Min_Subtotal = new(220, 0, -1, 0, 0, "Damage_Min + Damage_Bonus_Min + Damage_Weapon_Min_Total_CurrentHand", "", "Damage_Min_Subtotal", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Percent_All_From_Skills = new(221, 0, -1, 0, 0, "", "", "Damage_Percent_All_From_Skills", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Delta = new(222, 0, -1, 0, 0, "", "", "Damage_Weapon_Delta", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Delta_SubTotal = new(223, 0, -1, 0, 0, "(Damage_Weapon_Delta > 0.0) ? (Max(1,  Damage_Weapon_Delta - Damage_Weapon_Bonus_Min)) : Damage_Weapon_Delta", "", "Damage_Weapon_Delta_SubTotal", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Max = new(224, 0, -1, 0, 0, "(Damage_Weapon_Min + Damage_Weapon_Delta)", "", "Damage_Weapon_Max", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Max_Total = new(225, 0, -1, 0, 0, "(Damage_Weapon_Min_Total + Damage_Weapon_Delta_Total)", "", "Damage_Weapon_Max_Total", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Max_Total_All = new(226, 0, -1, 0, 0, "(Damage_Weapon_Max_Total#Physical + Damage_Weapon_Max_Total#Fire + Damage_Weapon_Max_Total#Cold + Damage_Weapon_Max_Total#Lightning + Damage_Weapon_Max_Total#Poison + Damage_Weapon_Max_Total#Arcane + Damage_Weapon_Max_Total#Holy)", "", "Damage_Weapon_Max_Total_All", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Delta_Total = new(227, 0, -1, 0, 0, "Max((Damage_Weapon_Delta_SubTotal + Damage_Weapon_Bonus_Delta + Damage_Weapon_Bonus_Delta_X1) * (1 + Damage_Weapon_Percent_Total),  0)", "", "Damage_Weapon_Delta_Total", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Delta_Total_All = new(228, 0, -1, 0, 0, "(Damage_Weapon_Delta_Total#Physical + Damage_Weapon_Delta_Total#Fire + Damage_Weapon_Delta_Total#Cold + Damage_Weapon_Delta_Total#Lightning + Damage_Weapon_Delta_Total#Poison + Damage_Weapon_Delta_Total#Arcane + Damage_Weapon_Delta_Total#Holy)", "", "Damage_Weapon_Delta_Total_All", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Bonus_Delta = new(229, 0, -1, 0, 0, "", "", "Damage_Weapon_Bonus_Delta", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Bonus_Delta_X1 = new(230, 0, -1, 0, 0, "", "", "Damage_Weapon_Bonus_Delta_X1", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Min = new(231, 0, -1, 0, 0, "", "", "Damage_Weapon_Min", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Min_Total = new(232, 0, -1, 0, 0, "(Damage_Weapon_Min + Damage_Weapon_Bonus_Min + Damage_Weapon_Bonus_Min_X1 + Damage_Weapon_Bonus_Flat) * (1 + Damage_Weapon_Percent_Total)", "", "Damage_Weapon_Min_Total", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Min_Total_All = new(233, 0, -1, 0, 0, "(Damage_Weapon_Min_Total#Physical + Damage_Weapon_Min_Total#Fire + Damage_Weapon_Min_Total#Cold + Damage_Weapon_Min_Total#Lightning + Damage_Weapon_Min_Total#Poison + Damage_Weapon_Min_Total#Arcane + Damage_Weapon_Min_Total#Holy)", "", "Damage_Weapon_Min_Total_All", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Average = new(234, 0, -1, 0, 0, "(Damage_Weapon_Min + (Damage_Weapon_Delta/2))", "", "Damage_Weapon_Average", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Average_Total = new(235, 0, -1, 0, 0, "(Damage_Weapon_Min_Total + (Damage_Weapon_Delta_Total/2))", "", "Damage_Weapon_Average_Total", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Average_Total_All = new(236, 0, -1, 0, 0, "(Damage_Weapon_Min_Total_All + (Damage_Weapon_Delta_Total_All/2))", "", "Damage_Weapon_Average_Total_All", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Bonus_Min = new(237, 0, -1, 0, 0, "", "", "Damage_Weapon_Bonus_Min", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Bonus_Min_X1 = new(238, 0, -1, 0, 0, "", "", "Damage_Weapon_Bonus_Min_X1", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Bonus_Flat = new(239, 0, -1, 0, 0, "", "", "Damage_Weapon_Bonus_Flat", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Percent_Bonus = new(240, 0, -1, 0, 0, "", "", "Damage_Weapon_Percent_Bonus", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Percent_All = new(241, 0, -1, 0, 0, "", "", "Damage_Weapon_Percent_All", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Percent_Total = new(242, 0, -1, 0, 0, "", "", "Damage_Weapon_Percent_Total", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Type_Percent_Bonus = new(243, 0, -1, 0, 0, "", "", "Damage_Type_Percent_Bonus", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Dealt_Percent_Bonus = new(244, 0, -1, 0, 0, "", "", "Damage_Dealt_Percent_Bonus", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Percent_Bonus_Witchdoctor = new(250, 0, -1, 0, 0, "", "", "Damage_Percent_Bonus_Witchdoctor", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Percent_Bonus_Wizard = new(251, 0, -1, 0, 0, "", "", "Damage_Percent_Bonus_Wizard", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Crit_Percent_Base = new(252, 0, -1, 0, 0, "", "", "Crit_Percent_Base", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Crit_Percent_Bonus_Capped = new(253, 0, -1, 0, 0, "", "", "Crit_Percent_Bonus_Capped", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Crit_Percent_Bonus_Uncapped = new(254, 0, -1, 0, 0, "", "", "Crit_Percent_Bonus_Uncapped", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Crit_Percent_Bonus_Hide_From_DPS = new(255, 0, -1, 0, 0, "", "", "Crit_Percent_Bonus_Hide_From_DPS", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Crit_Percent_Cap = new(256, 0, -1, 0, 0, "", "", "Crit_Percent_Cap", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Crit_Damage_Cap = new(257, 0, -1, 0, 0, "", "", "Crit_Damage_Cap", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Crit_Damage_Percent = new(258, 0, -1, 0, 0, "", "", "Crit_Damage_Percent", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Crit_Damage_Percent_Uncapped = new(259, 0, -1, 0, 0, "", "", "Crit_Damage_Percent_Uncapped", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Crit_Effect_Time = new(260, 0, -1, 0, 0, "", "", "Crit_Effect_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeI Damage_Reduction_Last_Tick = new(265, 0, -1, 0, 0, "", "", "Damage_Reduction_Last_Tick", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF Block_Amount_Total_Min = new(275, 0, -1, 0, 0, "(Block_Amount + Block_Amount_Item_Min + Block_Amount_Item_Bonus) * (1 + Block_Amount_Bonus_Percent)", "", "Block_Amount_Total_Min", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Block_Amount_Total_Max = new(276, 0, -1, 0, 0, "(Block_Amount + Block_Amount_Item_Min + Block_Amount_Item_Delta + Block_Amount_Item_Bonus) * (1 + Block_Amount_Bonus_Percent)", "", "Block_Amount_Total_Max", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Dodge_Chance_Bonus_Additive = new(283, 0, -1, 0, 0, "", "", "Dodge_Chance_Bonus_Additive", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Dodge_Chance_Bonus_Hide_From_Toughness = new(284, 0, -1, 0, 0, "", "", "Dodge_Chance_Bonus_Hide_From_Toughness", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Last_Damage_MainActor = new(295, -1, -1, 0, 0, "", "", "Last_Damage_MainActor", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Last_ACD_Attacked = new(296, -1, -1, 0, 0, "", "", "Last_ACD_Attacked", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Thorns_Percent = new(336, 0, -1, 0, 0, "", "", "Thorns_Percent", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Thorns_Percent_All = new(337, 0, -1, 0, 0, "", "", "Thorns_Percent_All", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Thorns_Percent_Total = new(338, 0, -1, 0, 0, "Thorns_Percent + Thorns_Percent_All#NONE", "", "Thorns_Percent_Total", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Thorns_Fixed = new(339, 0, -1, 0, 0, "", "", "Thorns_Fixed", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Thorns_Fixed_Bonus_Percent = new(340, 0, -1, 0, 0, "", "", "Thorns_Fixed_Bonus_Percent", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Thorns_Fixed_Total = new(341, 0, -1, 0, 0, "Thorns_Fixed * (1.0 + Thorns_Fixed_Bonus_Percent#NONE)", "", "Thorns_Fixed_Total", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Thorns_AOE_Radius = new(342, 0, -1, 0, 0, "", "", "Thorns_AOE_Radius", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF On_First_Hit_Thorns_Percent = new(344, 0, -1, 0, 0, "", "", "On_First_Hit_Thorns_Percent", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Steal_Health_Percent = new(345, 0, -1, 0, 0, "", "", "Steal_Health_Percent", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Steal_Mana_Percent = new(346, 0, -1, 0, 0, "", "", "Steal_Mana_Percent", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Last_Proc_Time = new(357, 0, -1, 0, 0, "", "", "Last_Proc_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Rope_Overlay = new(360, -1, -1, 0, 0, "", "", "Rope_Overlay", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeI General_Cooldown = new(361, -1, -1, 0, 0, "", "", "General_Cooldown", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Power_Cooldown = new(362, -1, -1, 0, 0, "", "", "Power_Cooldown", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI Power_Cooldown_Start = new(363, 2147483647, -1, 0, 0, "", "", "Power_Cooldown_Start", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI Proc_Cooldown = new(364, 0, -1, 0, 0, "", "", "Proc_Cooldown", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI Emote_Cooldown = new(365, 0, -1, 0, 0, "", "", "Emote_Cooldown", GameAttributeEncoding.Int, 1, 0, 0, 32);
        public static readonly GameAttributeI Next_Charge_Gained_time = new(371, 0, -1, 0, 0, "", "", "Next_Charge_Gained_time", GameAttributeEncoding.Int, 136, 0, 0, 32);
        public static readonly GameAttributeI Recharge_Start_Time = new(372, 0, -1, 0, 0, "", "", "Recharge_Start_Time", GameAttributeEncoding.Int, 136, 0, 0, 32);
        public static readonly GameAttributeF Act = new(373, -1, -1, 0, 0, "", "", "Act", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeI Durability_Cur = new(380, 0, -1, 0, 1, "", "", "Durability_Cur", GameAttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly GameAttributeI Durability_Max = new(381, 0, -1, 0, 1, "", "", "Durability_Max", GameAttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly GameAttributeF Durability_Last_Damage = new(382, 0, -1, 0, 0, "", "", "Durability_Last_Damage", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Ping = new(387, -1, -1, 0, 0, "", "", "Ping", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Item_Bound_To_ACD = new(394, -1, -1, 0, 0, "0", "", "Item_Bound_To_ACD", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Item_Locked_To_ACD = new(395, -1, -1, 0, 0, "0", "", "Item_Locked_To_ACD", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Item_LegendaryItem_Level_Override = new(397, 0, -1, 0, 0, "0", "", "Item_LegendaryItem_Level_Override", GameAttributeEncoding.Float32, 8, 0, 0, 32);
        public static readonly GameAttributeI ItemStackQuantityHi = new(400, 0, -1, 4, 1, "", "", "ItemStackQuantityHi", GameAttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly GameAttributeI ItemStackQuantityLo = new(401, 0, -1, 4, 1, "", "", "ItemStackQuantityLo", GameAttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly GameAttributeF IdentifyCost = new(404, 0, -1, 0, 0, "", "", "IdentifyCost", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeI Seed = new(405, 0, -1, 0, 0, "0", "", "Seed", GameAttributeEncoding.Int, 8, 0, 0, 32);
        public static readonly GameAttributeF EnchantedAffixOld = new(423, -1, -1, 0, 0, "0", "", "EnchantedAffixOld", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF EnchantedAffixNew = new(424, -1, -1, 0, 0, "0", "", "EnchantedAffixNew", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF EnchantedAffixSeed = new(425, 0, -1, 0, 0, "0", "", "EnchantedAffixSeed", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF EnchantedAffixCount = new(426, 0, -1, 0, 0, "0", "", "EnchantedAffixCount", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeI TransmogGBID = new(427, -1, -1, 0, 0, "0", "", "TransmogGBID", GameAttributeEncoding.Float32, 8, 0, 0, 32);
        public static readonly GameAttributeF TransmogGBIDTempOverride = new(428, -1, -1, 0, 0, "0", "", "TransmogGBIDTempOverride", GameAttributeEncoding.Float32, 8, 0, 0, 32);
        public static readonly GameAttributeF HighlySalvageable = new(429, 0, -1, 0, 0, "0", "", "HighlySalvageable", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF ItemUnlockTimeHi = new(430, 0, -1, 0, 0, "", "", "ItemUnlockTimeHi", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF ItemUnlockTimeLo = new(431, 0, -1, 0, 0, "", "", "ItemUnlockTimeLo", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF CubeEnchantedGemRank = new(432, 0, -1, 0, 0, "0", "", "CubeEnchantedGemRank", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF CubeEnchantedGemType = new(433, 0, -1, 0, 0, "0", "", "CubeEnchantedGemType", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Cube_Enchanted_Strength_Item = new(434, 0, -1, 0, 0, "", "", "Cube_Enchanted_Strength_Item", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Cube_Enchanted_Dexterity_Item = new(435, 0, -1, 0, 0, "", "", "Cube_Enchanted_Dexterity_Item", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Cube_Enchanted_Intelligence_Item = new(436, 0, -1, 0, 0, "", "", "Cube_Enchanted_Intelligence_Item", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Cube_Enchanted_Vitality_Item = new(437, 0, -1, 0, 0, "", "", "Cube_Enchanted_Vitality_Item", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Alpha_For_Other_Players = new(440, -1, -1, 0, 0, "", "", "Alpha_For_Other_Players", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF RActor_Fade_Group = new(442, -1, -1, 0, 0, "", "", "RActor_Fade_Group", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Treasure_Class = new(454, -1, -1, 0, 0, "", "", "Treasure_Class", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Door_Timer = new(468, -1, -1, 0, 0, "", "", "Door_Timer", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeI Gizmo_Operator_ACDID = new(470, -1, -1, 3, 1, "", "", "Gizmo_Operator_ACDID", GameAttributeEncoding.Int, 4, 0, 0, 32);
        public static readonly GameAttributeF Triggering_Count = new(471, 0, -1, 0, 0, "", "", "Triggering_Count", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Summoned_By_SNO = new(484, -1, -1, 0, 0, "", "", "Summoned_By_SNO", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Pet_Proc_Scalar = new(485, 1065353216, -1, 0, 0, "", "", "Pet_Proc_Scalar", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Callout_Cooldown = new(493, -1, -1, 0, 0, "", "", "Callout_Cooldown", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Banter_Cooldown = new(494, -1, -1, 0, 0, "", "", "Banter_Cooldown", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Conversation_Heard_Count = new(495, 0, -1, 0, 0, "", "", "Conversation_Heard_Count", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Last_Tick_Shop_Entered = new(496, -1, -1, 0, 0, "", "", "Last_Tick_Shop_Entered", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Axe = new(498, 0, -1, 0, 0, "", "", "Axe", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Axe2H = new(499, 0, -1, 0, 0, "", "", "Axe2H", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF ThrowingAxe = new(500, 0, -1, 0, 0, "", "", "ThrowingAxe", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF AxeAny = new(501, 0, -1, 0, 0, "Pin(Axe + Axe2H + ThrowingAxe, 0, 1)", "", "AxeAny", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Bow = new(502, 0, -1, 0, 0, "", "", "Bow", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Crossbow = new(503, 0, -1, 0, 0, "", "", "Crossbow", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF BowAny = new(504, 0, -1, 0, 0, "Pin(Bow + Crossbow, 0, 1)", "", "BowAny", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Club = new(505, 0, -1, 0, 0, "", "", "Club", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Club2H = new(506, 0, -1, 0, 0, "", "", "Club2H", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF ClubAny = new(507, 0, -1, 0, 0, "Pin(Club + Club2H, 0, 1)", "", "ClubAny", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Dagger = new(508, 0, -1, 0, 0, "", "", "Dagger", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Mace = new(509, 0, -1, 0, 0, "", "", "Mace", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Mace2H = new(510, 0, -1, 0, 0, "", "", "Mace2H", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF MaceAny = new(511, 0, -1, 0, 0, "Pin(Mace + Mace2H, 0, 1)", "", "MaceAny", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Sword = new(512, 0, -1, 0, 0, "", "", "Sword", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Sword2H = new(513, 0, -1, 0, 0, "", "", "Sword2H", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF SwordAny = new(514, 0, -1, 0, 0, "Pin(Sword + Sword2H, 0, 1)", "", "SwordAny", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Polearm = new(515, 0, -1, 0, 0, "", "", "Polearm", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Spear = new(516, 0, -1, 0, 0, "", "", "Spear", GameAttributeEncoding.Float32, 13, 0, 0, 32);
        public static readonly GameAttributeF Wand = new(517, 0, -1, 0, 0, "", "", "Wand", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF ColdStaff = new(518, 0, -1, 0, 0, "", "", "ColdStaff", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF FireStaff = new(519, 0, -1, 0, 0, "", "", "FireStaff", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF LightningStaff = new(520, 0, -1, 0, 0, "", "", "LightningStaff", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF PoisonStaff = new(521, 0, -1, 0, 0, "", "", "PoisonStaff", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF StaffAny = new(522, 0, -1, 0, 0, "Pin(ColdStaff + FireStaff + LightningStaff + PoisonStaff, 0, 1)", "", "StaffAny", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Weapon1H = new(523, 0, -1, 0, 0, "Pin(Axe + Club + Dagger + Mace + Sword + Wand, 0, 1)", "", "Weapon1H", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Weapon2H = new(524, 0, -1, 0, 0, "Pin(Axe2H + BowAny + Club2H + Mace2H + Sword2H + Polearm + Spear + StaffAny, 0, 1)", "", "Weapon2H", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF WeaponMelee = new(525, 0, -1, 0, 0, "Pin(Axe + Axe2H + ClubAny + Dagger + MaceAny + SwordAny + Polearm + Spear + Wand + StaffAny, 0, 1)", "", "WeaponMelee", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF WeaponRanged = new(526, 0, -1, 0, 0, "Pin(ThrowingAxe + BowAny, 0, 1)", "", "WeaponRanged", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Quiver = new(527, 0, -1, 0, 0, "", "", "Quiver", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Reincarnation_Buff = new(528, -1, -1, 0, 0, "", "", "Reincarnation_Buff", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Dead_Body_AnimTag = new(529, -1, -1, 0, 0, "", "", "Dead_Body_AnimTag", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeI Spawned_by_ACDID = new(530, -1, -1, 0, 0, "", "", "Spawned_by_ACDID", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Summoned_By_ACDID = new(531, -1, -1, 0, 0, "", "", "Summoned_By_ACDID", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Summoner_ID = new(532, -1, -1, 0, 0, "", "", "Summoner_ID", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Banner_ACDID = new(533, -1, -1, 0, 0, "", "", "Banner_ACDID", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF Attacks_Per_Second_Item_MainHand = new(538, 0, -1, 0, 0, "(Held_In_OffHand ? 0 : Attacks_Per_Second_Item_Subtotal )", "", "Attacks_Per_Second_Item_MainHand", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Attacks_Per_Second_Item_OffHand = new(539, 0, -1, 0, 0, "(Held_In_OffHand ? Attacks_Per_Second_Item_Subtotal : 0)", "", "Attacks_Per_Second_Item_OffHand", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Attacks_Per_Second_Item_Total_MainHand = new(540, 0, -1, 0, 0, "Attacks_Per_Second_Item_MainHand + Attacks_Per_Second_Item_Bonus", "", "Attacks_Per_Second_Item_Total_MainHand", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Attacks_Per_Second_Item_Total_OffHand = new(541, 0, -1, 0, 0, "Attacks_Per_Second_Item_OffHand + Attacks_Per_Second_Item_Bonus", "", "Attacks_Per_Second_Item_Total_OffHand", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Min_Total_MainHand = new(542, 0, -1, 0, 0, "(Held_In_OffHand#NONE ? 0 : Damage_Weapon_Min_Total )", "", "Damage_Weapon_Min_Total_MainHand", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Min_Total_OffHand = new(543, 0, -1, 0, 0, "(Held_In_OffHand#NONE ? Damage_Weapon_Min_Total : 0)", "", "Damage_Weapon_Min_Total_OffHand", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Delta_Total_MainHand = new(544, 0, -1, 0, 0, "(Held_In_OffHand#NONE ? 0 : Damage_Weapon_Delta_Total )", "", "Damage_Weapon_Delta_Total_MainHand", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Delta_Total_OffHand = new(545, 0, -1, 0, 0, "(Held_In_OffHand#NONE ? Damage_Weapon_Delta_Total : 0)", "", "Damage_Weapon_Delta_Total_OffHand", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Attacks_Per_Second_Item_CurrentHand = new(546, 0, -1, 0, 0, "(DualWield_Hand ? Attacks_Per_Second_Item_OffHand : Attacks_Per_Second_Item_MainHand)", "", "Attacks_Per_Second_Item_CurrentHand", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Min_Total_CurrentHand = new(547, 0, -1, 0, 0, "(DualWield_Hand#NONE ? Damage_Weapon_Min_Total_OffHand : Damage_Weapon_Min_Total_MainHand)", "", "Damage_Weapon_Min_Total_CurrentHand", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Damage_Weapon_Delta_Total_CurrentHand = new(548, 0, -1, 0, 0, "(DualWield_Hand#NONE ? Damage_Weapon_Delta_Total_OffHand : Damage_Weapon_Delta_Total_MainHand)", "", "Damage_Weapon_Delta_Total_CurrentHand", GameAttributeEncoding.Float32, 136, 0, 0, 32);
        public static readonly GameAttributeF Has_Special_Death_AnimTag = new(549, -1, -1, 0, 0, "", "", "Has_Special_Death_AnimTag", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Death_Type_Override = new(550, -1, -1, 0, 0, "", "", "Death_Type_Override", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Last_Tick_Potion_Used = new(554, -1, -1, 0, 0, "", "", "Last_Tick_Potion_Used", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Last_Damage_ACD = new(562, -1, -1, 0, 0, "", "", "Last_Damage_ACD", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Attached_To_ACD = new(563, -1, -1, 0, 0, "", "", "Attached_To_ACD", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Attachment_ACD = new(564, -1, -1, 0, 0, "", "", "Attachment_ACD", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Normal_Attack_Replacement_Power_SNO = new(565, -1, -1, 0, 0, "", "", "Normal_Attack_Replacement_Power_SNO", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Expensive_Proc_Count = new(568, 0, -1, 0, 0, "", "", "Expensive_Proc_Count", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Post_260A_Legendary_Gem_Cap = new(569, 0, -1, 0, 0, "", "", "Post_260A_Legendary_Gem_Cap", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Champion_Clone_Next_Tick = new(571, 0, -1, 0, 0, "", "", "Champion_Clone_Next_Tick", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Champion_Ghostly_Next_Tick = new(576, 0, -1, 0, 0, "", "", "Champion_Ghostly_Next_Tick", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Projectile_Reflect_Forced_Target = new(586, -1, -1, 0, 0, "", "", "Projectile_Reflect_Forced_Target", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Projectile_Reflect_Damage_Scalar = new(587, 1065353216, -1, 0, 0, "", "", "Projectile_Reflect_Damage_Scalar", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Projectile_Reflect_Damage_Cap_Remaining = new(589, 0, -1, 0, 0, "", "", "Projectile_Reflect_Damage_Cap_Remaining", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick0 = new(594, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick0", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick1 = new(595, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick1", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick2 = new(596, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick2", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick3 = new(597, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick3", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick4 = new(598, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick4", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick5 = new(599, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick5", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick6 = new(600, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick6", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick7 = new(601, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick7", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick8 = new(602, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick8", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick9 = new(603, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick9", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick10 = new(604, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick10", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick11 = new(605, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick11", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick12 = new(606, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick12", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick13 = new(607, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick13", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick14 = new(608, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick14", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick15 = new(609, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick15", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick16 = new(610, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick16", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick17 = new(611, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick17", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick18 = new(612, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick18", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick19 = new(613, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick19", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick20 = new(614, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick20", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick21 = new(615, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick21", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick22 = new(616, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick22", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick23 = new(617, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick23", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick24 = new(618, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick24", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick25 = new(619, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick25", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick26 = new(620, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick26", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick27 = new(621, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick27", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick28 = new(622, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick28", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick29 = new(623, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick29", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick30 = new(624, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick30", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_Start_Tick31 = new(625, 0, -1, 0, 0, "", "", "Buff_Icon_Start_Tick31", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick0 = new(626, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick0", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick1 = new(627, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick1", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick2 = new(628, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick2", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick3 = new(629, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick3", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick4 = new(630, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick4", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick5 = new(631, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick5", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick6 = new(632, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick6", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick7 = new(633, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick7", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick8 = new(634, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick8", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick9 = new(635, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick9", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick10 = new(636, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick10", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick11 = new(637, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick11", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick12 = new(638, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick12", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick13 = new(639, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick13", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick14 = new(640, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick14", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick15 = new(641, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick15", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick16 = new(642, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick16", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick17 = new(643, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick17", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick18 = new(644, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick18", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick19 = new(645, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick19", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick20 = new(646, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick20", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick21 = new(647, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick21", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick22 = new(648, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick22", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick23 = new(649, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick23", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick24 = new(650, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick24", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick25 = new(651, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick25", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick26 = new(652, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick26", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick27 = new(653, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick27", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick28 = new(654, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick28", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick29 = new(655, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick29", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick30 = new(656, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick30", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Buff_Icon_End_Tick31 = new(657, 0, -1, 0, 0, "", "", "Buff_Icon_End_Tick31", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF Ambient_Damage_Effect_Last_Time = new(659, 0, -1, 0, 0, "", "", "Ambient_Damage_Effect_Last_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Scripted_Fade_Time = new(663, 0, -1, 0, 0, "", "", "Scripted_Fade_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Shatter_Chance = new(670, 0, -1, 0, 0, "", "", "Shatter_Chance", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Summon_Expiration_Tick = new(672, 0, -1, 0, 0, "", "", "Summon_Expiration_Tick", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Summon_Count = new(673, 0, -1, 0, 0, "", "", "Summon_Count", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Wizard_Slowtime_Proxy_ACD = new(678, -1, -1, 0, 0, "", "", "Wizard_Slowtime_Proxy_ACD", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Resurrection_Power = new(680, -1, -1, 0, 0, "", "", "Resurrection_Power", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Item_Time_Sold = new(687, 0, -1, 0, 0, "", "", "Item_Time_Sold", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Forced_Hireling_Power = new(688, -1, -1, 0, 0, "", "", "Forced_Hireling_Power", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF RootTargetACD = new(690, -1, -1, 0, 0, "", "", "RootTargetACD", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF RootTotalTicks = new(693, 0, -1, 0, 0, "", "", "RootTotalTicks", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeI SkillKit = new(710, -1, -1, 0, 0, "", "", "SkillKit", GameAttributeEncoding.Int, 136, 0, 0, 32);
        //public static readonly GameAttributeI SkillKit = new GameAttributeI(709, -1, -1, 0, 0, "", "", "SkillKit", GameAttributeEncoding.Int, 136, 0, 0, 32);
        public static readonly GameAttributeF Damage_Shield_Amount = new(714, 0, -1, 0, 0, "", "", "Damage_Shield_Amount", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Guard_Object_ACDID = new(715, -1, -1, 0, 0, "", "", "Guard_Object_ACDID", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Follow_Target_ACDID = new(716, -1, -1, 0, 0, "", "", "Follow_Target_ACDID", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Forced_Enemy_ACDID = new(718, -1, -1, 0, 0, "", "", "Forced_Enemy_ACDID", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF NPC_Talk_Target_ANN = new(719, -1, -1, 0, 0, "", "", "NPC_Talk_Target_ANN", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF NPC_Conv_Target_ANN = new(720, -1, -1, 0, 0, "", "", "NPC_Conv_Target_ANN", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Script_Target_ACDID = new(721, -1, -1, 0, 0, "", "", "Script_Target_ACDID", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Look_Target_Server_ANN = new(722, -1, -1, 0, 0, "", "", "Look_Target_Server_ANN", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF ItemBuffIcon = new(728, 0, -1, 0, 0, "0", "", "ItemBuffIcon", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Gizmo_Actor_SNO_To_Spawn = new(730, -1, -1, 0, 0, "", "", "Gizmo_Actor_SNO_To_Spawn", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Death_Replacement_Power_SNO = new(732, -1, -1, 0, 0, "", "", "Death_Replacement_Power_SNO", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Headstone_Player_ANN = new(737, -1, -1, 0, 0, "", "", "Headstone_Player_ANN", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Resource_Cost_Reduction_Percent_Total = new(739, 0, -1, 0, 0, "", "",  "Resource_Cost_Reduction_Percent_Total", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Fury_Effect_Level = new(746, 0, -1, 0, 0, "", "", "Fury_Effect_Level", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Free_Cast = new(749, 0, -1, 0, 0, "", "", "Free_Cast", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Frailty_Next_Application_Tick = new(754, 0, -1, 0, 0, "", "", "Frailty_Next_Application_Tick", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF World_Seed = new(758, 0, -1, 0, 0, "", "", "World_Seed", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Combo_Time_Last_Move = new(802, 0, -1, 0, 0, "", "", "Combo_Time_Last_Move", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Death_Replacement_Effect_Group_SNO = new(804, -1, -1, 0, 0, "", "", "Death_Replacement_Effect_Group_SNO", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeI Checkpoint_Resurrection_Allowed_Game_Time = new(805, 0, -1, 0, 0, "", "", "Checkpoint_Resurrection_Allowed_Game_Time", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Checkpoint_Resurrection_Forced_Game_Time = new(806, 0, -1, 0, 0, "", "", "Checkpoint_Resurrection_Forced_Game_Time", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Corpse_Resurrection_Allowed_Game_Time = new(807, 0, -1, 0, 0, "", "", "Corpse_Resurrection_Allowed_Game_Time", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF Controlling_TimedEvent_SNO = new(810, -1, -1, 0, 0, "", "", "Controlling_TimedEvent_SNO", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Spawner_Concurrent_Count_ID = new(855, -1, -1, 0, 0, "", "", "Spawner_Concurrent_Count_ID", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeI Skill_Override = new(857, -1, -1, 0, 0, "", "", "Skill_Override", GameAttributeEncoding.Int, 136, 0, 0, 32);
        public static readonly GameAttributeF Walk_Passability_Power_SNO = new(1057, -1, -1, 0, 0, "", "", "Walk_Passability_Power_SNO", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Passability_Power_SNO = new(1058, -1, -1, 0, 0, "", "", "Passability_Power_SNO", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Flippy_ID = new(1059, -1, -1, 0, 0, "", "", "Flippy_ID", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Summoning_Machine_Next_Spawn_Ticks = new(1062, 0, -1, 0, 0, "", "", "Summoning_Machine_Next_Spawn_Ticks", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeI Set_Item_Count = new(1066, 0, -1, 0, 0, "", "", "Set_Item_Count", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Set_Bonus_Count = new(1067, 0, -1, 0, 0, "", "", "Set_Bonus_Count", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF Last_ACD_Attacked_By = new(1075, -1, -1, 0, 0, "", "", "Last_ACD_Attacked_By", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeI Looping_Animation_Start_Time = new(1080, 0, -1, 1, 1, "", "", "Looping_Animation_Start_Time", GameAttributeEncoding.Int, 222, 0, 0, 32);
        public static readonly GameAttributeI Looping_Animation_End_Time = new(1081, 0, -1, 1, 1, "", "", "Looping_Animation_End_Time", GameAttributeEncoding.Int, 222, 0, 0, 32);
        public static readonly GameAttributeF Heal_Effect_Last_Played_Tick = new(1083, -1, -1, 0, 0, "", "", "Heal_Effect_Last_Played_Tick", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Resource_Effect_Last_Played_tick = new(1084, -1, -1, 0, 0, "", "", "Resource_Effect_Last_Played_tick", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Thorns_Effect_Last_Played_tick = new(1085, -1, -1, 0, 0, "", "", "Thorns_Effect_Last_Played_tick", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF PVP_Kills = new(1086, 0, -1, 0, 0, "", "", "PVP_Kills", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF PVP_Deaths = new(1087, 0, -1, 0, 0, "", "", "PVP_Deaths", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF PVP_Assists = new(1088, 0, -1, 0, 0, "", "", "PVP_Assists", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF PVP_Progression_Points_Gained = new(1089, 0, -1, 0, 0, "", "", "PVP_Progression_Points_Gained", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF PVP_Current_Kill_Streak = new(1090, 0, -1, 0, 0, "", "", "PVP_Current_Kill_Streak", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF PVP_Current_Death_Streak = new(1091, 0, -1, 0, 0, "", "", "PVP_Current_Death_Streak", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF PVP_Longest_Kill_Streak = new(1092, 0, -1, 0, 0, "", "", "PVP_Longest_Kill_Streak", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF PVP_Longest_Death_Streak = new(1093, 0, -1, 0, 0, "", "", "PVP_Longest_Death_Streak", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF MinimapIconOverride = new(1104, -1, -1, 0, 0, "", "", "MinimapIconOverride", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Last_Blocked_ACD = new(1106, -1, -1, 0, 0, "", "", "Last_Blocked_ACD", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Last_Blocked_Time = new(1107, 0, -1, 0, 0, "", "", "Last_Blocked_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Taunt_Target_ACD = new(1113, -1, -1, 0, 0, "", "", "Taunt_Target_ACD", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Charm_Source_ACD = new(1114, -1, -1, 0, 0, "", "", "Charm_Source_ACD", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Projectile_Effect_SNO = new(1116, -1, -1, 0, 0, "", "", "Projectile_Effect_SNO", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Percent_Reduction_From_Ranged = new(1128, 0, -1, 0, 0, "", "", "Damage_Percent_Reduction_From_Ranged", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Percent_Reduction_From_Melee = new(1129, 0, -1, 0, 0, "", "", "Damage_Percent_Reduction_From_Melee", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Percent_Reduction_From_Elites = new(1131, 0, -1, 0, 0, "", "", "Damage_Percent_Reduction_From_Elites", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Percent_Bonus_Vs_Elites = new(1134, 0, -1, 0, 0, "", "", "Damage_Percent_Bonus_Vs_Elites", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Item_Manipulation_Timeout = new(1135, 0, -1, 0, 0, "", "", "Item_Manipulation_Timeout", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Picked_Up_Time = new(1136, 0, -1, 0, 0, "", "", "Picked_Up_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Last_ACD_Killed_Time = new(1138, 0, -1, 0, 0, "", "", "Last_ACD_Killed_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Damage_Percent_Bonus = new(1196, 0, -1, 0, 0, "", "", "Power_Damage_Percent_Bonus", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Strength_Item = new(1208, 0, -1, 0, 0, "", "", "Strength_Item", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Dexterity_Item = new(1209, 0, -1, 0, 0, "", "", "Dexterity_Item", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Intelligence_Item = new(1210, 0, -1, 0, 0, "", "", "Intelligence_Item", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Vitality_Item = new(1211, 0, -1, 0, 0, "", "", "Vitality_Item", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeI Item_Level_Requirement_Reduction = new(1212, 0, -1, 0, 0, "", "", "Item_Level_Requirement_Reduction", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Item_Level_Requirement_Override = new(1213, 0, -1, 0, 0, "", "", "Item_Level_Requirement_Override", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF Core_Attributes_From_Item_Bonus_Multiplier = new(1217, 1065353216, -1, 0, 0, "", "", "Core_Attributes_From_Item_Bonus_Multiplier", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Special_Inventory_Has_Sold = new(1220, 0, -1, 0, 0, "", "", "Special_Inventory_Has_Sold", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Inventory_Reroll_Time = new(1222, 0, -1, 0, 0, "", "", "Inventory_Reroll_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Channel_Lockout_Time = new(1225, 0, -1, 0, 0, "", "", "Power_Channel_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_0_Lockout_Time = new(1226, 0, -1, 0, 0, "", "", "Power_Buff_0_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_1_Lockout_Time = new(1227, 0, -1, 0, 0, "", "", "Power_Buff_1_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_2_Lockout_Time = new(1228, 0, -1, 0, 0, "", "", "Power_Buff_2_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_3_Lockout_Time = new(1229, 0, -1, 0, 0, "", "", "Power_Buff_3_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_4_Lockout_Time = new(1230, 0, -1, 0, 0, "", "", "Power_Buff_4_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_5_Lockout_Time = new(1231, 0, -1, 0, 0, "", "", "Power_Buff_5_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_6_Lockout_Time = new(1232, 0, -1, 0, 0, "", "", "Power_Buff_6_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_7_Lockout_Time = new(1233, 0, -1, 0, 0, "", "", "Power_Buff_7_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_8_Lockout_Time = new(1234, 0, -1, 0, 0, "", "", "Power_Buff_8_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_9_Lockout_Time = new(1235, 0, -1, 0, 0, "", "", "Power_Buff_9_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_10_Lockout_Time = new(1236, 0, -1, 0, 0, "", "", "Power_Buff_10_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_11_Lockout_Time = new(1237, 0, -1, 0, 0, "", "", "Power_Buff_11_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_12_Lockout_Time = new(1238, 0, -1, 0, 0, "", "", "Power_Buff_12_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_13_Lockout_Time = new(1239, 0, -1, 0, 0, "", "", "Power_Buff_13_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_14_Lockout_Time = new(1240, 0, -1, 0, 0, "", "", "Power_Buff_14_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_15_Lockout_Time = new(1241, 0, -1, 0, 0, "", "", "Power_Buff_15_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_16_Lockout_Time = new(1242, 0, -1, 0, 0, "", "", "Power_Buff_16_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_17_Lockout_Time = new(1243, 0, -1, 0, 0, "", "", "Power_Buff_17_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_18_Lockout_Time = new(1244, 0, -1, 0, 0, "", "", "Power_Buff_18_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_19_Lockout_Time = new(1245, 0, -1, 0, 0, "", "", "Power_Buff_19_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_20_Lockout_Time = new(1246, 0, -1, 0, 0, "", "", "Power_Buff_20_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_21_Lockout_Time = new(1247, 0, -1, 0, 0, "", "", "Power_Buff_21_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_22_Lockout_Time = new(1248, 0, -1, 0, 0, "", "", "Power_Buff_22_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_23_Lockout_Time = new(1249, 0, -1, 0, 0, "", "", "Power_Buff_23_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_24_Lockout_Time = new(1250, 0, -1, 0, 0, "", "", "Power_Buff_24_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_25_Lockout_Time = new(1251, 0, -1, 0, 0, "", "", "Power_Buff_25_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_26_Lockout_Time = new(1252, 0, -1, 0, 0, "", "", "Power_Buff_26_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_27_Lockout_Time = new(1253, 0, -1, 0, 0, "", "", "Power_Buff_27_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_28_Lockout_Time = new(1254, 0, -1, 0, 0, "", "", "Power_Buff_28_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_29_Lockout_Time = new(1255, 0, -1, 0, 0, "", "", "Power_Buff_29_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_30_Lockout_Time = new(1256, 0, -1, 0, 0, "", "", "Power_Buff_30_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Buff_31_Lockout_Time = new(1257, 0, -1, 0, 0, "", "", "Power_Buff_31_Lockout_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeI Known_By_Owner = new(1258, -1, -1, 0, 0, "", "", "Known_By_Owner", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF Projectile_Detonate_Time = new(1261, 0, -1, 0, 0, "", "", "Projectile_Detonate_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF PageOfFate_Item = new(1263, -1, -1, 0, 0, "", "", "PageOfFate_Item", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Accolade_0 = new(1264, -1, -1, 0, 0, "", "", "Accolade_0", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Accolade_1 = new(1265, -1, -1, 0, 0, "", "", "Accolade_1", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Accolade_2 = new(1266, -1, -1, 0, 0, "", "", "Accolade_2", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Accolade_3 = new(1267, -1, -1, 0, 0, "", "", "Accolade_3", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Accolade_4 = new(1268, -1, -1, 0, 0, "", "", "Accolade_4", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Accolade_0_Value = new(1269, 0, -1, 0, 0, "", "", "Accolade_0_Value", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Accolade_1_Value = new(1270, 0, -1, 0, 0, "", "", "Accolade_1_Value", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Accolade_2_Value = new(1271, 0, -1, 0, 0, "", "", "Accolade_2_Value", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Accolade_3_Value = new(1272, 0, -1, 0, 0, "", "", "Accolade_3_Value", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Accolade_4_Value = new(1273, 0, -1, 0, 0, "", "", "Accolade_4_Value", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF PVP_Tokens = new(1275, 0, -1, 0, 0, "", "", "PVP_Tokens", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeI PVP_Experience_Next_Lo = new(1276, 0, -1, 0, 0, "", "", "PVP_Experience_Next_Lo", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI PVP_Experience_Next_Hi = new(1277, 0, -1, 0, 0, "", "", "PVP_Experience_Next_Hi", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF PVP_Gold_Gained_This_Game = new(1278, 0, -1, 0, 0, "", "", "PVP_Gold_Gained_This_Game", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF PVP_PVP_Experience_Gained_This_Game_Lo = new(1279, 0, -1, 0, 0, "", "", "PVP_PVP_Experience_Gained_This_Game_Lo", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF PVP_PVP_Experience_Gained_This_Game_Hi = new(1280, 0, -1, 0, 0, "", "", "PVP_PVP_Experience_Gained_This_Game_Hi", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF PVP_Normal_Experience_Gained_This_Game_Lo = new(1281, 0, -1, 0, 0, "", "", "PVP_Normal_Experience_Gained_This_Game_Lo", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF PVP_Normal_Experience_Gained_This_Game_Hi = new(1282, 0, -1, 0, 0, "", "", "PVP_Normal_Experience_Gained_This_Game_Hi", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF PVP_Tokens_Gained_This_Game = new(1283, 0, -1, 0, 0, "", "", "PVP_Tokens_Gained_This_Game", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeI Effect_Owner_ANN = new(1287, -1, -1, 0, 0, "", "", "Effect_Owner_ANN", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF Engaged_Rare_Time = new(1289, 0, -1, 0, 0, "", "", "Engaged_Rare_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Engaged_Goblin_Time = new(1290, 0, -1, 0, 0, "", "", "Engaged_Goblin_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF On_Death_Accolade_0 = new(1291, -1, -1, 0, 0, "", "", "On_Death_Accolade_0", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF On_Death_Accolade_0_Value = new(1292, 0, -1, 0, 0, "", "", "On_Death_Accolade_0_Value", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Item_Power_Passive = new(1293, 0, -1, 0, 0, "", "", "Item_Power_Passive", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF PVP_TeamDeathmatch_Games_Played = new(1294, 0, -1, 0, 0, "", "", "PVP_TeamDeathmatch_Games_Played", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Last_Health_Drop_Interval = new(1295, -1, -1, 0, 0, "", "", "Last_Health_Drop_Interval", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Last_Continuous_Knockback_Power_ID = new(1298, -1, -1, 0, 0, "", "", "Last_Continuous_Knockback_Power_ID", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Targeted_Legendary_Chance = new(1303, 0, -1, 0, 0, "", "", "Targeted_Legendary_Chance", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Actor_Forwards_Buffs = new(1310, -1, -1, 0, 0, "", "", "Actor_Forwards_Buffs", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Item_Marked_As_Junk = new(1311, 0, -1, 0, 0, "", "", "Item_Marked_As_Junk", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeI Paragon_Bonus = new(1314, 0, -1, 0, 0, "", "", "Paragon_Bonus", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Paragon_Bonus_Points_Available = new(1315, 0, -1, 0, 0, "", "", "Paragon_Bonus_Points_Available", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF Dungeon_Finder_Progress_Percent = new(1316, 0, -1, 0, 0, "", "", "Dungeon_Finder_Progress_Percent", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Item_Trade_Player_High = new(1317, 0, -1, 0, 0, "", "", "Item_Trade_Player_High", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Item_Trade_Player_Low = new(1318, 0, -1, 0, 0, "", "", "Item_Trade_Player_Low", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Item_Trade_End_Time = new(1319, 0, -1, 0, 0, "", "", "Item_Trade_End_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Item_Trade_Timer_ID = new(1320, -1, -1, 0, 0, "", "", "Item_Trade_Timer_ID", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Season = new(1322, 0, -1, 0, 0, "", "", "Season", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeI DamageDoneTotalTrackedHi = new(1323, 0, -1, 0, 0, "", "", "DamageDoneTotalTrackedHi", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI DamageDoneTotalTrackedLo = new(1324, 0, -1, 0, 0, "", "", "DamageDoneTotalTrackedLo", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI DamageDoneTrackingStartTick = new(1325, 0, -1, 0, 0, "", "", "DamageDoneTrackingStartTick", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF PowerPersistsAcrossGames = new(1326, 0, -1, 0, 0, "", "", "PowerPersistsAcrossGames", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Targeted_Rare_Chance = new(1334, 0, -1, 0, 0, "", "", "Targeted_Rare_Chance", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Dynamic_Entrance_GUID = new(1336, 0, -1, 0, 0, "", "", "Dynamic_Entrance_GUID", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Bonus_Chance_To_Be_Crit_Hit = new(1337, 0, -1, 0, 0, "", "", "Bonus_Chance_To_Be_Crit_Hit", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Bonus_Chance_To_Be_Crit_Hit_By_Actor = new(1338, 0, -1, 0, 0, "", "", "Bonus_Chance_To_Be_Crit_Hit_By_Actor", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Bonus_Chance_To_Receive_Crushing_Blown = new(1339, 0, -1, 0, 0, "", "", "Bonus_Chance_To_Receive_Crushing_Blown", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Item_Store_Player_High = new(1342, 0, -1, 0, 0, "", "", "Item_Store_Player_High", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Item_Store_Player_Low = new(1343, 0, -1, 0, 0, "", "", "Item_Store_Player_Low", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Primary_Resource_Cost_Override = new(1344, 2139095039, -1, 0, 0, "", "", "Power_Primary_Resource_Cost_Override", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Secondary_Resource_Cost_Override = new(1345, 2139095039, -1, 0, 0, "", "", "Power_Secondary_Resource_Cost_Override", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Channel_Cost_Override = new(1346, 2139095039, -1, 0, 0, "", "", "Power_Channel_Cost_Override", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Elemental_Effect_Amplitude_Bonus = new(1352, 0, -1, 0, 0, "", "", "Elemental_Effect_Amplitude_Bonus", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Elemental_Effect_Duration_Bonus = new(1353, 0, -1, 0, 0, "", "", "Elemental_Effect_Duration_Bonus", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Elemental_Effect_Proc_Chance_Bonus = new(1354, 0, -1, 0, 0, "", "", "Elemental_Effect_Proc_Chance_Bonus", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Splash_Damage_Effect_Percent = new(1355, 0, -1, 0, 0, "", "", "Splash_Damage_Effect_Percent", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Crushing_Blow_Proc_Chance = new(1356, 0, -1, 0, 0, "", "", "Crushing_Blow_Proc_Chance", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Negative_Health_Globe_Spawn_Chance = new(1361, 0, -1, 0, 0, "", "", "Negative_Health_Globe_Spawn_Chance", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Override_Attached_Anim = new(1362, -1, -1, 0, 0, "", "", "Override_Attached_Anim", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Item_Legendary_Item_Base_Item = new(1364, -1, -1, 0, 0, "0", "", "Item_Legendary_Item_Base_Item", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Targeted_Magic_Chance = new(1365, 0, -1, 0, 0, "", "", "Targeted_Magic_Chance", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Boost_TC_NextTime = new(1369, 0, -1, 0, 0, "", "", "Boost_TC_NextTime", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Potion_Bonus_Armor_Percent = new(1370, 0, -1, 0, 0, "", "", "Potion_Bonus_Armor_Percent", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Potion_Bonus_Resist_All = new(1371, 0, -1, 0, 0, "", "", "Potion_Bonus_Resist_All", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Potion_Bonus_Hitpoints_Granted = new(1372, 0, -1, 0, 0, "", "", "Potion_Bonus_Hitpoints_Granted", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Potion_Bonus_Buff_Duration = new(1373, 0, -1, 0, 0, "", "", "Potion_Bonus_Buff_Duration", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Potion_Bonus_Life_On_Hit = new(1374, 0, -1, 0, 0, "", "", "Potion_Bonus_Life_On_Hit", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Potion_Bonus_Life_On_Kill = new(1375, 0, -1, 0, 0, "", "", "Potion_Bonus_Life_On_Kill", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Last_Special_Item_Time_High = new(1376, 0, -1, 0, 0, "", "", "Last_Special_Item_Time_High", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Last_Special_Item_Time_Low = new(1377, 0, -1, 0, 0, "", "", "Last_Special_Item_Time_Low", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Item_Rest_Bonus_Pool = new(1378, 0, -1, 0, 0, "", "", "Item_Rest_Bonus_Pool", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Item_Unlucky_Bonus_Secs = new(1379, 0, -1, 0, 0, "", "", "Item_Unlucky_Bonus_Secs", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Item_Unlucky_Bonus_Allow = new(1380, 0, -1, 0, 0, "", "", "Item_Unlucky_Bonus_Allow", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Avenger_Buildup_Secs = new(1381, 0, -1, 0, 0, "", "", "Avenger_Buildup_Secs", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF TornadoStraighten = new(1384, 0, -1, 0, 0, "", "", "TornadoStraighten", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Bonus_From_Nephalem_Glory = new(1386, 0, -1, 0, 0, "", "", "Damage_Bonus_From_Nephalem_Glory", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Item_Player_Recipient = new(1387, -1, -1, 0, 0, "-1", "", "Item_Player_Recipient", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Item_Assigned_Hero_High = new(1389, 0, -1, 0, 0, "", "", "Item_Assigned_Hero_High", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Item_Assigned_Hero_Low = new(1390, 0, -1, 0, 0, "", "", "Item_Assigned_Hero_Low", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Pierce_Charge = new(1391, 0, -1, 0, 0, "", "", "Pierce_Charge", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Upscaled_Level = new(1392, 0, -1, 0, 0, "", "", "Upscaled_Level", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_SidekickMultiplier = new(1394, 0, -1, 0, 0, "", "", "Damage_SidekickMultiplier", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Thorns_AOE_Radius_Next_Time = new(1395, 0, -1, 0, 0, "", "", "Thorns_AOE_Radius_Next_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Tiered_Loot_Run_Key_Level = new(1398, -1, -1, 0, 0, "", "", "Tiered_Loot_Run_Key_Level", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF In_Tiered_Loot_Run_Level = new(1399, -1, -1, 0, 0, "", "", "In_Tiered_Loot_Run_Level", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeI Effective_Level = new(1402, 0, -1, 0, 0, "Max(Upscaled_Level, Level)", "", "Effective_Level", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Jewel_Rank = new(1403, 1, -1, 0, 0, "", "", "Jewel_Rank", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Jewel_Upgrades_Used = new(1408, 0, -1, 0, 0, "", "", "Jewel_Upgrades_Used", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Jewel_Upgrades_Max = new(1409, 0, -1, 0, 0, "", "", "Jewel_Upgrades_Max", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Jewel_Upgrades_Bonus = new(1410, 0, -1, 0, 0, "", "", "Jewel_Upgrades_Bonus", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF Tiered_Loot_Run_Reward_Choice_State = new(1414, -1, -1, 0, 0, "", "", "Tiered_Loot_Run_Reward_Choice_State", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Tiered_Loot_Run_Reward_Receives_Key = new(1415, -1, -1, 0, 0, "", "", "Tiered_Loot_Run_Reward_Receives_Key", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF CurrentCosmeticEffect = new(1416, -1, -1, 0, 0, "", "", "CurrentCosmeticEffect", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF XP_Potion_Buff_Expiration = new(1418, 0, -1, 0, 0, "", "", "XP_Potion_Buff_Expiration", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Gold_Find_Potion_Buff_Expiration = new(1419, 0, -1, 0, 0, "", "", "Gold_Find_Potion_Buff_Expiration", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Bloodshard_Potion_Buff_Expiration = new(1420, 0, -1, 0, 0, "", "", "Bloodshard_Potion_Buff_Expiration", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Current_Cosmetic_Pet = new(1421, -1, -1, 0, 0, "", "", "Current_Cosmetic_Pet", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Cosmetic_Pet_Power = new(1422, 0, -1, 0, 0, "", "", "Cosmetic_Pet_Power", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Cosmetic_Pet_Expiration = new(1423, 0, -1, 0, 0, "", "", "Cosmetic_Pet_Expiration", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Cosmetic_Portrait_Frame = new(1424, -1, -1, 0, 0, "", "", "Cosmetic_Portrait_Frame", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF HQ_Cursed_Realm_Reagents_Collected = new(1426, 0, -1, 0, 0, "", "", "HQ_Cursed_Realm_Reagents_Collected", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF HQ_Cursed_Realm_Reagents_Dropped = new(1427, 0, -1, 0, 0, "", "", "HQ_Cursed_Realm_Reagents_Dropped", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Tiered_Loot_Run_Death_Count = new(1429, 0, -1, 0, 0, "", "", "Tiered_Loot_Run_Death_Count", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Tiered_Loot_Run_Corpse_Resurrection_Allowed_GameTime = new(1430, 0, -1, 0, 0, "", "", "Tiered_Loot_Run_Corpse_Resurrection_Allowed_GameTime", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Last_Posted_Achievement_Points = new(1431, 0, -1, 0, 0, "", "", "Last_Posted_Achievement_Points", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Cosmetic_Pet_Actor = new(1432, -1, -1, 0, 0, "", "", "Cosmetic_Pet_Actor", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Platinum_Cap_Remaining = new(1433, 0, -1, 0, 0, "", "", "Platinum_Cap_Remaining", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Platinum_Cap_Last_Gain = new(1434, 0, -1, 0, 0, "", "", "Platinum_Cap_Last_Gain", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Last_Boss_Kill_Time = new(1435, 0, -1, 0, 0, "", "", "Last_Boss_Kill_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Last_Bounty_Complete_Time = new(1436, 0, -1, 0, 0, "", "", "Last_Bounty_Complete_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Last_Treasure_Goblin_Kill_Time = new(1437, 0, -1, 0, 0, "", "", "Last_Treasure_Goblin_Kill_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Stash_Tabs_Rewarded_By_Achievements = new(1439, 0, -1, 0, 0, "", "", "Stash_Tabs_Rewarded_By_Achievements", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Projectile_Det_Path_Reflect_Count = new(1441, 0, -1, 0, 0, "", "", "Projectile_Det_Path_Reflect_Count", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Last_Cosmetic_Pet = new(1442, -1, -1, 0, 0, "", "", "Last_Cosmetic_Pet", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Platinum_Last_Significant_Kill = new(1443, 0, -1, 0, 0, "", "", "Platinum_Last_Significant_Kill", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Power_Last_Attribute_Snapshot_Update_Time = new(1444, 0, -1, 0, 0, "", "", "Power_Last_Attribute_Snapshot_Update_Time", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Multiplicative_Damage_Percent_Bonus = new(1447, 1065353216, -1, 0, 0, "", "", "Multiplicative_Damage_Percent_Bonus", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Multiplicative_Damage_Percent_Bonus_For_Skill = new(1448, 1065353216, -1, 0, 0, "", "", "Multiplicative_Damage_Percent_Bonus_For_Skill", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Multiplicative_Damage_Percent_Bonus_For_Player = new(1449, 1065353216, -1, 0, 0, "", "", "Multiplicative_Damage_Percent_Bonus_For_Player", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeB In_Swarm_Rift_World = new(1451, 0, -1, 0, 0, "", "", "In_Swarm_Rift_World", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeF Multiplicative_Damage_Percent_Bonus_No_Pets = new(1452, 1065353216, -1, 0, 0, "", "", "Multiplicative_Damage_Percent_Bonus_No_Pets", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Multiplicative_Damage_Percent_Bonus_ochallengeAgainst_CC_Targets = new(1453, 1065353216, -1, 0, 0, "", "", "Multiplicative_Damage_Percent_Bonus_ochallengeAgainst_CC_Targets", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Multiplicative_Damage_Percent_Bonus_Against_Slowed_Targets = new(1454, 1065353216, -1, 0, 0, "", "", "Multiplicative_Damage_Percent_Bonus_Against_Slowed_Targets", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Necromancer_Last_Corpse_Spawn_Check_Tick = new(1457, 0, -1, 0, 0, "", "", "Necromancer_Last_Corpse_Spawn_Check_Tick", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Necromancer_Corpse_Owner_Player_High = new(1458, 0, -1, 0, 0, "", "", "Necromancer_Corpse_Owner_Player_High", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Necromancer_Corpse_Owner_Player_Low = new(1459, 0, -1, 0, 0, "", "", "Necromancer_Corpse_Owner_Player_Low", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Necromancer_Corpse_Charges = new(1460, 0, -1, 0, 0, "", "", "Necromancer_Corpse_Charges", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeI Necromancer_Corpse_Source_Monster_SNO = new(1461, -1, -1, 0, 0, "", "", "Necromancer_Corpse_Source_Monster_SNO", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeI Currencies_Discovered = new(1463, 0, -1, 0, 0, "", "", "Currencies_Discovered", GameAttributeEncoding.Int, 0, 0, 0, 32);
        public static readonly GameAttributeF In_Tiered_Challenge_Rift = new(1464, 0, -1, 0, 0, "", "", "In_Tiered_Challenge_Rift", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Necromancer_Cursed = new(1465, -1, -1, 0, 0, "", "", "Necromancer_Cursed", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Necromancer_Curse_Count = new(1466, 0, -1, 0, 0, "", "", "Necromancer_Curse_Count", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Necromancer_Unique_Curse_Count = new(1467, 0, -1, 0, 0, "", "", "Necromancer_Unique_Curse_Count", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Eligible_For_Weekly_Challenge_Reward = new(1468, 0, -1, 0, 0, "", "", "Eligible_For_Weekly_Challenge_Reward", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Force_Remote_FX = new(1469, 0, -1, 0, 0, "", "", "Force_Remote_FX", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Strength_Bonus = new(18, 0, -1, 0, 0, "", "", "Strength_Bonus", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Dexterity_Bonus = new(19, 0, -1, 0, 0, "", "", "Dexterity_Bonus", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Intelligence_Bonus = new(20, 0, -1, 0, 0, "", "", "Intelligence_Bonus", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Vitality_Bonus = new(21, 0, -1, 0, 0, "", "", "Vitality_Bonus", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Strength_Bonus_Percent = new(22, 0, -1, 0, 0, "", "", "Strength_Bonus_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Dexterity_Bonus_Percent = new(23, 0, -1, 0, 0, "", "", "Dexterity_Bonus_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Intelligence_Bonus_Percent = new(24, 0, -1, 0, 0, "", "", "Intelligence_Bonus_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Vitality_Bonus_Percent = new(25, 0, -1, 0, 0, "", "", "Vitality_Bonus_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Strength_Reduction_Percent = new(26, 0, -1, 0, 0, "", "", "Strength_Reduction_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Dexterity_Reduction_Percent = new(27, 0, -1, 0, 0, "", "", "Dexterity_Reduction_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Intelligence_Reduction_Percent = new(28, 0, -1, 0, 0, "", "", "Intelligence_Reduction_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Vitality_Reduction_Percent = new(29, 0, -1, 0, 0, "", "", "Vitality_Reduction_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Rest_Experience_Bonus_Percent = new(47, 0, -1, 0, 0, "", "", "Rest_Experience_Bonus_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Resource_Cost_Reduction_Total = new(70, 0, -1, 0, 0, "Resource_Cost_Reduction_Amount", "", "Resource_Cost_Reduction_Total", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Resource_Set_Point_Bonus = new(71, 0, -1, 0, 0, "", "", "Resource_Set_Point_Bonus", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Faster_Healing_Percent = new(72, 0, -1, 0, 0, "", "", "Faster_Healing_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Spending_Resource_Heals_Percent = new(73, 0, -1, 0, 0, "", "", "Spending_Resource_Heals_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Bonus_Healing_Received_Percent = new(74, 0, -1, 0, 0, "", "", "Bonus_Healing_Received_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Reduced_Healing_Received_Percent = new(75, 0, -1, 0, 0, "", "", "Reduced_Healing_Received_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Bonus_Health_Percent_Per_Second_From_Globes = new(89, 0, -1, 0, 0, "", "", "Bonus_Health_Percent_Per_Second_From_Globes", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Bonus_Health_Percent_Per_Second_From_Globes_Total = new(90, 0, -1, 0, 0, "Bonus_Health_Percent_Per_Second_From_Globes", "", "Bonus_Health_Percent_Per_Second_From_Globes_Total", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Mana_Gained_From_Globes_Percent = new(91, 0, -1, 0, 0, "", "", "Mana_Gained_From_Globes_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Mana_Gained_From_Globes = new(92, 0, -1, 0, 0, "", "", "Mana_Gained_From_Globes", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Resistance = new(93, 0, -1, 0, 0, "", "", "Resistance", GameAttributeEncoding.Float16, 222, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Percent = new(94, 0, -1, 0, 0, "", "", "Resistance_Percent", GameAttributeEncoding.Float16, 222, 0, 0, 16);
        public static readonly GameAttributeF Resistance_All = new(96, 0, -1, 0, 0, "", "", "Resistance_All", GameAttributeEncoding.Float16, 222, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Percent_All = new(97, 0, -1, 0, 0, "", "", "Resistance_Percent_All", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Resistance_From_Intelligence = new(98, 0, -1, 0, 0, "(Intelligence_Total * 0.1)", "", "Resistance_From_Intelligence", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Light_Radius_Percent_Bonus = new(114, 0, -1, 0, 0, "", "", "Light_Radius_Percent_Bonus", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Hitpoints_Percent = new(125, 0, -1, 0, 0, "", "", "Hitpoints_Percent", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Hitpoints_Max_Percent_Bonus_Item = new(135, 0, -1, 0, 0, "", "", "Hitpoints_Max_Percent_Bonus_Item", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Resource_Percent = new(157, 100, 10, 0, 0, "", "", "Resource_Percent", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Resource_Regen_Bonus_Percent = new(159, 0, 10, 0, 0, "", "", "Resource_Regen_Bonus_Percent", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Resource_Regen_Total = new(160, 0, 10, 0, 0, "Resource_Regen_Stop_Regen ? 0 : Resource_Regen_Per_Second * (1 + Resource_Regen_Bonus_Percent) + (Resource_Regen_Percent_Per_Second * Resource_Max_Total)", "", "Resource_Regen_Total", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Resource_Max_Percent_Bonus = new(162, 0, 10, 0, 0, "Resource_Percent", "", "Resource_Max_Percent_Bonus", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Movement_Scalar = new(171, 0, -1, 0, 0, "", "", "Movement_Scalar", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Walking_Rate = new(172, 0, -1, 0, 0, "", "", "Walking_Rate", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Running_Rate = new(173, 0, -1, 0, 0, "", "", "Running_Rate", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Sprinting_Rate = new(174, 0, -1, 0, 0, "", "", "Sprinting_Rate", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Strafing_Rate = new(175, 0, -1, 0, 0, "", "", "Strafing_Rate", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Walking_Rate_Total = new(176, 0, -1, 0, 0, "Walking_Rate * Movement_Scalar_Total", "", "Walking_Rate_Total", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Running_Rate_Total = new(177, 0, -1, 0, 0, "Running_Rate * Movement_Scalar_Total", "", "Running_Rate_Total", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Last_Running_Rate = new(178, 0, -1, 0, 0, "", "", "Last_Running_Rate", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Sprinting_Rate_Total = new(179, 0, -1, 0, 0, "Sprinting_Rate * Movement_Scalar_Total", "", "Sprinting_Rate_Total", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Strafing_Rate_Total = new(180, 0, -1, 0, 0, "Strafing_Rate * Movement_Scalar_Total", "", "Strafing_Rate_Total", GameAttributeEncoding.Float16, 0, 136, 0, 16);
        public static readonly GameAttributeF Movement_Bonus_Total = new(181, 0, -1, 0, 0, "Movement_Bonus_Run_Speed", "", "Movement_Bonus_Total", GameAttributeEncoding.Float16, 222, 0, 0, 16);
        public static readonly GameAttributeF Movement_Scalar_Subtotal = new(182, 0, -1, 0, 0, "Max(0.1, Movement_Scalar) * (1 + Movement_Bonus_Total) * (1-Movement_Scalar_Reduction_Percent * (1-Min(1, Movement_Scalar_Reduction_Resistance)))", "", "Movement_Scalar_Subtotal", GameAttributeEncoding.Float16, 222, 0, 0, 16);
        public static readonly GameAttributeF Movement_Scalar_Capped_Total = new(183, 0, -1, 0, 0, "Min(Movement_Scalar_Cap, Movement_Scalar_Subtotal)", "", "Movement_Scalar_Capped_Total", GameAttributeEncoding.Float16, 222, 0, 0, 16);
        public static readonly GameAttributeF Movement_Scalar_Uncapped_Bonus = new(184, 0, -1, 0, 0, "", "", "Movement_Scalar_Uncapped_Bonus", GameAttributeEncoding.Float16, 222, 0, 0, 16);
        public static readonly GameAttributeF Movement_Bonus_Run_Speed = new(186, 0, -1, 0, 0, "", "", "Movement_Bonus_Run_Speed", GameAttributeEncoding.Float16, 222, 0, 0, 16);
        public static readonly GameAttributeF Casting_Speed = new(188, 0, -1, 0, 0, "", "", "Casting_Speed", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Casting_Speed_Bonus = new(189, 0, -1, 0, 0, "", "", "Casting_Speed_Bonus", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Casting_Speed_Total = new(190, 0, -1, 0, 0, "(Casting_Speed + Casting_Speed_Bonus) * Max(0.1, 1 + Casting_Speed_Percent)", "", "Casting_Speed_Total", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Hit_Chance = new(192, 0, -1, 0, 0, "", "", "Hit_Chance", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Knockback_Attack_Scalar = new(193, 0, -1, 0, 0, "", "", "Knockback_Attack_Scalar", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF AI_Cooldown_Reduction_Percent = new(207, 0, -1, 0, 0, "", "", "AI_Cooldown_Reduction_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Power_Cooldown_Reduction_Percent = new(209, 0, -1, 0, 0, "", "", "Power_Cooldown_Reduction_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Power_Cooldown_Reduction_Percent_All = new(210, 0, -1, 0, 0, "", "", "Power_Cooldown_Reduction_Percent_All", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Power_Cooldown_Reduction_Percent_All_Capped = new(211, 0, -1, 0, 0, "Power_Cooldown_Reduction_Percent_All", "", "Power_Cooldown_Reduction_Percent_All_Capped", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Pierce_Chance = new(261, 0, -1, 0, 0, "", "", "Pierce_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Damage_Absorb_Percent = new(262, 0, -1, 0, 0, "", "", "Damage_Absorb_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Block_Chance = new(266, 0, -1, 0, 0, "", "", "Block_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Block_Chance_Sub_Total = new(267, 0, -1, 0, 0, "Min(1.0, Block_Chance + Block_Chance_Item_Total)", "", "Block_Chance_Sub_Total", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Block_Chance_Bonus_Item = new(268, 0, -1, 0, 0, "", "", "Block_Chance_Bonus_Item", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Block_Chance_Item = new(269, 0, -1, 0, 0, "0", "0", "Block_Chance_Item", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Block_Chance_Item_Total = new(270, 0, -1, 0, 0, "Block_Chance_Item + Block_Chance_Bonus_Item", "", "Block_Chance_Item_Total", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Block_Chance_Uncapped_Bonus = new(271, 0, -1, 0, 0, "", "", "Block_Chance_Uncapped_Bonus", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Block_Chance_Capped_Total = new(272, 0, -1, 0, 0, "Min(1.0, Block_Chance_Sub_Total + Block_Chance_Uncapped_Bonus)", "", "Block_Chance_Capped_Total", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Dodge_Chance_Bonus = new(280, 0, -1, 0, 0, "", "", "Dodge_Chance_Bonus", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Dodge_Chance_Bonus_Melee = new(281, 0, -1, 0, 0, "", "", "Dodge_Chance_Bonus_Melee", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Dodge_Chance_Bonus_Ranged = new(282, 0, -1, 0, 0, "", "", "Dodge_Chance_Bonus_Ranged", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Stun_Chance = new(303, 0, -1, 0, 0, "", "", "Stun_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Stun_Length = new(304, 0, -1, 0, 0, "", "", "Stun_Length", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Stun_Recovery = new(305, 0, -1, 0, 0, "", "", "Stun_Recovery", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Stun_Recovery_Speed = new(306, 0, -1, 0, 0, "", "", "Stun_Recovery_Speed", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Poison_Length_Reduction = new(309, 0, -1, 0, 0, "", "", "Poison_Length_Reduction", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Bleed_Duration = new(311, 0, -1, 0, 0, "", "", "Bleed_Duration", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Freeze_Length_Reduction = new(313, 0, -1, 0, 0, "", "", "Freeze_Length_Reduction", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Projectile_Speed = new(366, 0, -1, 0, 0, "", "", "Projectile_Speed", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Projectile_Speed_Increase_Percent = new(367, 0, -1, 0, 0, "", "", "Projectile_Speed_Increase_Percent", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Amplify_Damage_Type_Percent = new(377, 0, -1, 0, 0, "", "", "Amplify_Damage_Type_Percent", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Amplify_Damage_Skill_Percent = new(378, 0, -1, 0, 0, "", "", "Amplify_Damage_Skill_Percent", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Amplify_Damage_Percent = new(379, 0, -1, 0, 0, "", "", "Amplify_Damage_Percent", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Item_Cost_Percent_Bonus = new(385, 0, -1, 0, 0, "", "", "Item_Cost_Percent_Bonus", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Requirement = new(388, 0, -1, 0, 0, "", "", "Requirement", GameAttributeEncoding.Float16, 8, 0, 0, 16);
        public static readonly GameAttributeF Requirements_Ease_Percent = new(389, 0, -1, 0, 0, "0", "", "Requirements_Ease_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Requirement_When_Equipped = new(390, 0, -1, 0, 0, "", "", "Requirement_When_Equipped", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Stats_All_Bonus = new(393, 0, -1, 0, 0, "", "", "Stats_All_Bonus", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Run_Speed_Granted = new(402, 0, -1, 0, 0, "", "", "Run_Speed_Granted", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Knockback_Weight = new(458, 0, -1, 0, 0, "", "", "Knockback_Weight", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Custom_Target_Weight = new(463, 0, -1, 0, 0, "", "", "Custom_Target_Weight", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Gizmo_Operation_Radius_Override = new(472, 0, -1, 1, 0, "", "", "Gizmo_Operation_Radius_Override", GameAttributeEncoding.Float16, 4, 0, 0, 16);
        public static readonly GameAttributeF Gate_Position = new(473, 0, -1, 0, 0, "", "", "Gate_Position", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Gate_Velocity = new(474, 0, -1, 0, 0, "", "", "Gate_Velocity", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Potion_Dilution_Percent = new(555, 0, -1, 0, 0, "", "", "Potion_Dilution_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Out_Of_Combat_Health_Regen_Percent = new(556, 0, -1, 0, 0, "", "", "Out_Of_Combat_Health_Regen_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Out_Of_Combat_Mana_Regen_Percent = new(557, 0, -1, 0, 0, "", "", "Out_Of_Combat_Mana_Regen_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Potion_Dilution_Scalar = new(559, 0, -1, 0, 0, "", "", "Potion_Dilution_Scalar", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Minion_Count_Bonus_Percent = new(567, 0, -1, 0, 0, "", "", "Minion_Count_Bonus_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Champion_Clone_Time_Min_In_Seconds = new(572, 0, -1, 0, 0, "", "", "Champion_Clone_Time_Min_In_Seconds", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Champion_Clone_Time_Delta_In_Seconds = new(573, 0, -1, 0, 0, "", "", "Champion_Clone_Time_Delta_In_Seconds", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Champion_Clone_Hitpoint_Bonus_Percent = new(574, 0, -1, 0, 0, "", "", "Champion_Clone_Hitpoint_Bonus_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Champion_Clone_Damage_Bonus_Percent = new(575, 0, -1, 0, 0, "", "", "Champion_Clone_Damage_Bonus_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Champion_Ghostly_Inactive_Time_Min_In_Seconds = new(577, 0, -1, 0, 0, "", "", "Champion_Ghostly_Inactive_Time_Min_In_Seconds", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Champion_Ghostly_Inactive_Time_Delta_In_Seconds = new(578, 0, -1, 0, 0, "", "", "Champion_Ghostly_Inactive_Time_Delta_In_Seconds", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Champion_Ghostly_Active_Time_Min_In_Seconds = new(579, 0, -1, 0, 0, "", "", "Champion_Ghostly_Active_Time_Min_In_Seconds", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Champion_Ghostly_Active_Time_Delta_In_Seconds = new(580, 0, -1, 0, 0, "", "", "Champion_Ghostly_Active_Time_Delta_In_Seconds", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Champion_Ghostly_Saved_Dodge_Chance = new(581, 0, -1, 0, 0, "", "", "Champion_Ghostly_Saved_Dodge_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Projectile_Amount_Bonus_Percent = new(584, 0, -1, 0, 0, "", "", "Projectile_Amount_Bonus_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Projectile_Reflect_Chance = new(585, 0, -1, 0, 0, "", "", "Projectile_Reflect_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Attack_Fear_Chance = new(590, 0, -1, 0, 0, "", "", "Attack_Fear_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Attack_Fear_Time_Min = new(591, 0, -1, 0, 0, "", "", "Attack_Fear_Time_Min", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Attack_Fear_Time_Delta = new(592, 0, -1, 0, 0, "", "", "Attack_Fear_Time_Delta", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Scale_Bonus = new(660, 0, -1, 0, 0, "", "", "Scale_Bonus", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF SlowTime_Debuff = new(666, 0, -1, 0, 0, "", "", "SlowTime_Debuff", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Freeze_Damage_Percent_Bonus = new(669, 0, -1, 0, 0, "", "", "Freeze_Damage_Percent_Bonus", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF DualWield_BothAttack_Chance = new(671, 0, -1, 0, 0, "", "", "DualWield_BothAttack_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF DamageCap_Percent = new(686, 0, -1, 0, 0, "", "", "DamageCap_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF RootAutoDecayPerSecond = new(691, 0, -1, 0, 0, "", "", "RootAutoDecayPerSecond", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF RootUnitValue = new(692, 0, -1, 0, 0, "", "", "RootUnitValue", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Stun = new(700, 0, -1, 0, 0, "", "", "Resistance_Stun", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Stun_Total = new(701, 0, -1, 0, 0, "Resistance_Stun + Resistance_StunRootFreeze", "", "Resistance_Stun_Total", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Root = new(702, 0, -1, 0, 0, "", "", "Resistance_Root", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Root_Total = new(703, 0, -1, 0, 0, "Resistance_Root + Resistance_StunRootFreeze", "", "Resistance_Root_Total", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Freeze = new(704, 0, -1, 0, 0, "", "", "Resistance_Freeze", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Freeze_Total = new(705, 0, -1, 0, 0, "Resistance_Freeze + Resistance_StunRootFreeze", "", "Resistance_Freeze_Total", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Resistance_StunRootFreeze = new(706, 0, -1, 0, 0, "", "", "Resistance_StunRootFreeze", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Look_Target_Broadcast_Intensity = new(723, 0, -1, 0, 0, "", "", "Look_Target_Broadcast_Intensity", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Look_Target_Broadcast_Radius = new(724, 0, -1, 0, 0, "", "", "Look_Target_Broadcast_Radius", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Gem_Attributes_Multiplier = new(727, 0, -1, 0, 0, "", "", "Gem_Attributes_Multiplier", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF ScrollDuration = new(729, 0, -1, 0, 0, "0", "", "ScrollDuration", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Gizmo_Actor_To_Spawn_Scale = new(731, 0, -1, 0, 0, "", "", "Gizmo_Actor_To_Spawn_Scale", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Resource_Cost_Reduction_Percent = new(738, 0, -1, 0, 0, "", "", "Resource_Cost_Reduction_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Resource_Cost_Reduction_Percent_All = new(740, 0, -1, 0, 0, "", "", "Resource_Cost_Reduction_Percent_All", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Damage_Type_Cost_Reduction_Percent = new(741, 0, -1, 0, 0, "", "", "Damage_Type_Cost_Reduction_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Penetration = new(742, 0, -1, 0, 0, "", "", "Resistance_Penetration", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Penetration_Total = new(743, 0, -1, 0, 0, "(Resistance_Penetration + Resistance_Penetration_All#NONE) * (Resistance_Penetration_Percent_All#NONE + 1)", "", "Resistance_Penetration_Total", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Penetration_All = new(744, 0, -1, 0, 0, "", "", "Resistance_Penetration_All", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Resistance_Penetration_Percent_All = new(745, 0, -1, 0, 0, "", "", "Resistance_Penetration_Percent_All", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Health_Potion_Bonus_Heal_Percent = new(747, 0, -1, 0, 0, "", "", "Health_Potion_Bonus_Heal_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Health_Potion_Affects_Allies_Percent = new(748, 0, -1, 0, 0, "", "", "Health_Potion_Affects_Allies_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Health_Cost_Discount = new(751, 0, -1, 0, 0, "", "", "Health_Cost_Discount", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Health_Cost_Scalar = new(752, 0, -1, 0, 0, "", "", "Health_Cost_Scalar", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Frailty_Health_Threshold = new(753, 0, -1, 0, 0, "", "", "Frailty_Health_Threshold", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Movement_Scalar_Reduction_Percent = new(755, 0, -1, 0, 0, "", "", "Movement_Scalar_Reduction_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Movement_Scalar_Reduction_Resistance = new(756, 0, -1, 0, 0, "", "", "Movement_Scalar_Reduction_Resistance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Damage_Absorb_Percent_All = new(757, 0, -1, 0, 0, "", "", "Damage_Absorb_Percent_All", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Casting_Speed_Percent = new(811, 0, -1, 0, 0, "", "", "Casting_Speed_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Repair_Discount_Percent = new(851, 0, -1, 0, 0, "", "", "Repair_Discount_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Screen_Attack_Radius_Constant = new(1064, 1114636288, -1, 0, 0, "", "", "Screen_Attack_Radius_Constant", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Spawner_Countdown_Percent = new(1068, 0, -1, 0, 0, "", "", "Spawner_Countdown_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Debuff_Duration_Reduction_Percent = new(1072, 0, -1, 0, 0, "", "", "Debuff_Duration_Reduction_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Gold_PickUp_Radius = new(1076, 0, -1, 0, 0, "", "", "Gold_PickUp_Radius", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Resource_Gain_Bonus_Percent = new(1079, 0, -1, 0, 0, "", "", "Resource_Gain_Bonus_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Turn_Rate_Scalar = new(1094, 1065353216, -1, 0, 0, "", "", "Turn_Rate_Scalar", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Turn_Accel_Scalar = new(1095, 1065353216, -1, 0, 0, "", "", "Turn_Accel_Scalar", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Turn_Deccel_Scalar = new(1096, 1065353216, -1, 0, 0, "", "", "Turn_Deccel_Scalar", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF UI_Only_Percent_Damage_Increase = new(1115, 0, -1, 0, 0, "", "", "UI_Only_Percent_Damage_Increase", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF On_Hit_Fear_Proc_Chance = new(1117, 0, -1, 0, 0, "", "", "On_Hit_Fear_Proc_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF On_Hit_Stun_Proc_Chance = new(1118, 0, -1, 0, 0, "", "", "On_Hit_Stun_Proc_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF On_Hit_Blind_Proc_Chance = new(1119, 0, -1, 0, 0, "", "", "On_Hit_Blind_Proc_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF On_Hit_Freeze_Proc_Chance = new(1120, 0, -1, 0, 0, "", "", "On_Hit_Freeze_Proc_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF On_Hit_Chill_Proc_Chance = new(1121, 0, -1, 0, 0, "", "", "On_Hit_Chill_Proc_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF On_Hit_Slow_Proc_Chance = new(1122, 0, -1, 0, 0, "", "", "On_Hit_Slow_Proc_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF On_Hit_Immobilize_Proc_Chance = new(1123, 0, -1, 0, 0, "", "", "On_Hit_Immobilize_Proc_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF On_Hit_Knockback_Proc_Chance = new(1124, 0, -1, 0, 0, "", "", "On_Hit_Knockback_Proc_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF On_Hit_Bleed_Proc_Chance = new(1125, 0, -1, 0, 0, "", "", "On_Hit_Bleed_Proc_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Damage_Percent_Reduction_Turns_Into_Heal = new(1130, 0, -1, 0, 0, "", "", "Damage_Percent_Reduction_Turns_Into_Heal", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Damage_Percent_Reduction_From_Type = new(1132, 0, -1, 0, 0, "", "", "Damage_Percent_Reduction_From_Type", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Damage_Percent_Bonus_Vs_Monster_Type = new(1133, 0, -1, 0, 0, "", "", "Damage_Percent_Bonus_Vs_Monster_Type", GameAttributeEncoding.Float16, 136, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Fear_Proc_Chance = new(1140, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Fear_Proc_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Stun_Proc_Chance = new(1141, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Stun_Proc_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Blind_Proc_Chance = new(1142, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Blind_Proc_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Freeze_Proc_Chance = new(1143, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Freeze_Proc_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Chill_Proc_Chance = new(1144, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Chill_Proc_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Slow_Proc_Chance = new(1145, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Slow_Proc_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Immobilize_Proc_Chance = new(1146, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Immobilize_Proc_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Knockback_Proc_Chance = new(1147, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Knockback_Proc_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Chance = new(1148, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Bleed_Proc_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Fear_Proc_Chance_MainHand = new(1154, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Fear_Proc_Chance_MainHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Fear_Proc_Chance_OffHand = new(1155, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Fear_Proc_Chance_OffHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Fear_Proc_Chance_CurrentHand = new(1156, 0, -1, 0, 0, "(DualWield_Hand ? Weapon_On_Hit_Fear_Proc_Chance_OffHand : Weapon_On_Hit_Fear_Proc_Chance_MainHand)", "", "Weapon_On_Hit_Fear_Proc_Chance_CurrentHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Stun_Proc_Chance_MainHand = new(1157, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Stun_Proc_Chance_MainHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Stun_Proc_Chance_OffHand = new(1158, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Stun_Proc_Chance_OffHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Stun_Proc_Chance_CurrentHand = new(1159, 0, -1, 0, 0, "(DualWield_Hand ? Weapon_On_Hit_Stun_Proc_Chance_OffHand : Weapon_On_Hit_Stun_Proc_Chance_MainHand)", "", "Weapon_On_Hit_Stun_Proc_Chance_CurrentHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Blind_Proc_Chance_MainHand = new(1160, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Blind_Proc_Chance_MainHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Blind_Proc_Chance_OffHand = new(1161, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Blind_Proc_Chance_OffHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Blind_Proc_Chance_CurrentHand = new(1162, 0, -1, 0, 0, "(DualWield_Hand ? Weapon_On_Hit_Blind_Proc_Chance_OffHand : Weapon_On_Hit_Blind_Proc_Chance_MainHand)", "", "Weapon_On_Hit_Blind_Proc_Chance_CurrentHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Freeze_Proc_Chance_MainHand = new(1163, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Freeze_Proc_Chance_MainHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Freeze_Proc_Chance_OffHand = new(1164, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Freeze_Proc_Chance_OffHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Freeze_Proc_Chance_CurrentHand = new(1165, 0, -1, 0, 0, "(DualWield_Hand ? Weapon_On_Hit_Freeze_Proc_Chance_OffHand : Weapon_On_Hit_Freeze_Proc_Chance_MainHand)", "", "Weapon_On_Hit_Freeze_Proc_Chance_CurrentHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Chill_Proc_Chance_MainHand = new(1166, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Chill_Proc_Chance_MainHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Chill_Proc_Chance_OffHand = new(1167, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Chill_Proc_Chance_OffHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Chill_Proc_Chance_CurrentHand = new(1168, 0, -1, 0, 0, "(DualWield_Hand ? Weapon_On_Hit_Chill_Proc_Chance_OffHand : Weapon_On_Hit_Chill_Proc_Chance_MainHand)", "", "Weapon_On_Hit_Chill_Proc_Chance_CurrentHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Slow_Proc_Chance_MainHand = new(1169, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Slow_Proc_Chance_MainHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Slow_Proc_Chance_OffHand = new(1170, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Slow_Proc_Chance_OffHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Slow_Proc_Chance_CurrentHand = new(1171, 0, -1, 0, 0, "(DualWield_Hand ? Weapon_On_Hit_Slow_Proc_Chance_OffHand : Weapon_On_Hit_Slow_Proc_Chance_MainHand)", "", "Weapon_On_Hit_Slow_Proc_Chance_CurrentHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Immobilize_Proc_Chance_MainHand = new(1172, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Immobilize_Proc_Chance_MainHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Immobilize_Proc_Chance_OffHand = new(1173, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Immobilize_Proc_Chance_OffHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Immobilize_Proc_Chance_CurrentHand = new(1174, 0, -1, 0, 0, "(DualWield_Hand ? Weapon_On_Hit_Immobilize_Proc_Chance_OffHand : Weapon_On_Hit_Immobilize_Proc_Chance_MainHand)", "", "Weapon_On_Hit_Immobilize_Proc_Chance_CurrentHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Knockback_Proc_Chance_MainHand = new(1175, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Knockback_Proc_Chance_MainHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Knockback_Proc_Chance_OffHand = new(1176, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Knockback_Proc_Chance_OffHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Knockback_Proc_Chance_CurrentHand = new(1177, 0, -1, 0, 0, "(DualWield_Hand ? Weapon_On_Hit_Knockback_Proc_Chance_OffHand : Weapon_On_Hit_Knockback_Proc_Chance_MainHand)", "", "Weapon_On_Hit_Knockback_Proc_Chance_CurrentHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Chance_MainHand = new(1178, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Bleed_Proc_Chance_MainHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Chance_OffHand = new(1179, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Bleed_Proc_Chance_OffHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Chance_CurrentHand = new(1180, 0, -1, 0, 0, "(DualWield_Hand ? Weapon_On_Hit_Bleed_Proc_Chance_OffHand : Weapon_On_Hit_Bleed_Proc_Chance_MainHand)", "", "Weapon_On_Hit_Bleed_Proc_Chance_CurrentHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Power_Instance_Damage_Percent_Bonus = new(1197, 0, -1, 0, 0, "", "", "Power_Instance_Damage_Percent_Bonus", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Power_Resource_Reduction = new(1198, 0, -1, 0, 0, "", "", "Power_Resource_Reduction", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Power_Resource_Reduction_Percent = new(1199, 0, -1, 0, 0, "", "", "Power_Resource_Reduction_Percent", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Power_Cooldown_Reduction = new(1200, 0, -1, 0, 0, "", "", "Power_Cooldown_Reduction", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Power_Cooldown_Reduction_All = new(1201, 0, -1, 0, 0, "", "", "Power_Cooldown_Reduction_All", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Power_Duration_Increase = new(1202, 0, -1, 0, 0, "", "", "Power_Duration_Increase", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Power_Crit_Percent_Bonus = new(1203, 0, -1, 0, 0, "", "", "Power_Crit_Percent_Bonus", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_Crit_Chance = new(1204, 0, -1, 0, 0, "", "", "Weapon_Crit_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_Crit_Chance_MainHand = new(1205, 0, -1, 0, 0, "", "", "Weapon_Crit_Chance_MainHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_Crit_Chance_OffHand = new(1206, 0, -1, 0, 0, "", "", "Weapon_Crit_Chance_OffHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Weapon_Crit_Chance_CurrentHand = new(1207, 0, -1, 0, 0, "", "(DualWield_Hand ? Weapon_Crit_Chance_OffHand : Weapon_Crit_Chance_MainHand)", "Weapon_Crit_Chance_CurrentHand", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Item_Durability_Percent_Bonus = new(1214, 0, -1, 0, 0, "", "", "Item_Durability_Percent_Bonus", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Necromancer_Corpse_Spawn_Chance = new(1456, 0, -1, 0, 0, "", "", "Necromancer_Corpse_Spawn_Chance", GameAttributeEncoding.Float16, 0, 0, 0, 16);
        public static readonly GameAttributeF Gold_Find_Community_Buff = new(54, 0, -1, 0, 0, "", "", "Gold_Find_Community_Buff", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Gold_Find_Potion_Buff = new(55, 0, -1, 0, 0, "", "", "Gold_Find_Potion_Buff", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Treasure_Find = new(67, 0, -1, 0, 0, "", "", "Treasure_Find", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Legendary_Find_Community_Buff = new(68, 0, -1, 0, 0, "", "", "Legendary_Find_Community_Buff", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Experience_Bonus = new(77, 0, -1, 0, 0, "", "", "Experience_Bonus", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Experience_Bonus_Percent = new(78, 0, -1, 0, 0, "", "", "Experience_Bonus_Percent", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Experience_Bonus_Percent_Handicap = new(79, 0, -1, 0, 0, "", "", "Experience_Bonus_Percent_Handicap", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Experience_Bonus_No_Penalty = new(81, 0, -1, 0, 0, "", "", "Experience_Bonus_No_Penalty", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Health_Globe_Bonus_Chance = new(82, 0, -1, 0, 0, "", "", "Health_Globe_Bonus_Chance", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Health_Globe_Bonus_Mult_Chance = new(83, 0, -1, 0, 0, "", "", "Health_Globe_Bonus_Mult_Chance", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Powerup_Globe_Bonus_Chance = new(84, 0, -1, 0, 0, "", "", "Powerup_Globe_Bonus_Chance", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Powerup_Globe_Bonus_Mult_Chance = new(85, 0, -1, 0, 0, "", "", "Powerup_Globe_Bonus_Mult_Chance", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Increased_Health_From_Globes_Percent = new(87, 0, -1, 0, 0, "", "", "Increased_Health_From_Globes_Percent", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Increased_Health_From_Globes_Percent_Total = new(88, 0, -1, 0, 0, "Increased_Health_From_Globes_Percent", "", "Increased_Health_From_Globes_Percent_Total", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Resistance_Total = new(95, 0, -1, 0, 0, "(Resistance + Resistance_All#NONE + Resistance_From_Intelligence#NONE) * ((Resistance_Percent_All#NONE + Resistance_Percent + 1))", "", "Resistance_Total", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Class_Damage_Reduction_Percent = new(99, 0, -1, 0, 0, "", "", "Class_Damage_Reduction_Percent", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_Factor_Level = new(116, 0, -1, 0, 0, "", "", "Hitpoints_Factor_Level", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_Factor_Vitality = new(117, 0, -1, 0, 0, "", "", "Hitpoints_Factor_Vitality", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_Total_From_Vitality = new(118, 0, -1, 0, 0, "Vitality_Total * Hitpoints_Factor_Vitality", "", "Hitpoints_Total_From_Vitality", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_Total_From_Level = new(119, 0, -1, 0, 0, "(Level-1) * Hitpoints_Factor_Level", "", "Hitpoints_Total_From_Level", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_Max = new(122, 0, -1, 0, 0, "", "", "Hitpoints_Max", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_Max_Bonus = new(123, 0, -1, 0, 0, "", "", "Hitpoints_Max_Bonus", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_Regen_Per_Second = new(126, 0, -1, 0, 0, "", "", "Hitpoints_Regen_Per_Second", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_Regen_Per_Second_Bonus = new(127, 0, -1, 0, 0, "", "", "Hitpoints_Regen_Per_Second_Bonus", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_Regen_Per_Second_Bonus_From_Skills = new(128, 0, -1, 0, 0, "", "", "Hitpoints_Regen_Per_Second_Bonus_From_Skills", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_Regen_Bonus_Percent = new(129, 0, -1, 0, 0, "", "", "Hitpoints_Regen_Bonus_Percent", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_Regen_Reduction_Percent = new(131, 0, -1, 0, 0, "", "", "Hitpoints_Regen_Reduction_Percent", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_Regen_Per_Second_Health_Globe = new(132, 0, -1, 0, 0, "", "", "Hitpoints_Regen_Per_Second_Health_Globe", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_Healed_Target = new(137, 0, -1, 0, 0, "", "", "Hitpoints_Healed_Target", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Resource_Max = new(151, 0, 10, 0, 0, "", "", "Resource_Max", GameAttributeEncoding.Float16Or32, 128, 0, 0, 0);
        public static readonly GameAttributeF Resource_Max_Bonus = new(152, 0, 10, 0, 0, "", "", "Resource_Max_Bonus", GameAttributeEncoding.Float16Or32, 222, 0, 0, 0);
        public static readonly GameAttributeF Resource_Factor_Level = new(154, 0, 10, 0, 0, "", "", "Resource_Factor_Level", GameAttributeEncoding.Float16Or32, 128, 0, 0, 0);
        public static readonly GameAttributeF Resource_Granted = new(155, 0, 10, 0, 0, "", "", "Resource_Granted", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Resource_Regen_Per_Second = new(158, 0, 10, 0, 0, "", "", "Resource_Regen_Per_Second", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Resource_Capacity_Used = new(163, 0, 10, 0, 0, "", "", "Resource_Capacity_Used", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Resource_Effective_Max = new(164, 0, 10, 0, 0, "Resource_Max_Total-Resource_Capacity_Used", "", "Resource_Effective_Max", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Resource_Regen_Percent_Per_Second = new(165, 0, -1, 0, 0, "", "", "Resource_Regen_Percent_Per_Second", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Resource_Degeneration_Stop_Point = new(166, 0, -1, 0, 0, "", "", "Resource_Degeneration_Stop_Point", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Power_Cooldown_Min_Time = new(208, 0, -1, 0, 0, "", "", "Power_Cooldown_Min_Time", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Damage_Delta = new(212, 0, -1, 0, 0, "", "", "Damage_Delta", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Damage_Reduction_Total = new(263, 0, -1, 0, 0, "", "", "Damage_Reduction_Total", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Damage_Reduction_Current = new(264, 0, -1, 0, 0, "", "", "Damage_Reduction_Current", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Block_Amount = new(273, 0, -1, 0, 0, "", "", "Block_Amount", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Block_Amount_Bonus_Percent = new(274, 0, -1, 0, 0, "", "", "Block_Amount_Bonus_Percent", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Block_Amount_Item_Min = new(277, 0, -1, 0, 0, "", "", "Block_Amount_Item_Min", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Block_Amount_Item_Delta = new(278, 0, -1, 0, 0, "", "", "Block_Amount_Item_Delta", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Block_Amount_Item_Bonus = new(279, 0, -1, 0, 0, "", "", "Block_Amount_Item_Bonus", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Get_Hit_Current = new(286, 0, -1, 0, 0, "", "", "Get_Hit_Current", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Get_Hit_Max_Base = new(287, 0, -1, 0, 0, "", "", "Get_Hit_Max_Base", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Get_Hit_Max_Per_Level = new(288, 0, -1, 0, 0, "", "", "Get_Hit_Max_Per_Level", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Get_Hit_Max = new(289, 0, -1, 0, 0, "Get_Hit_Max_Base + (Get_Hit_Max_Per_Level * Level)", "", "Get_Hit_Max", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Get_Hit_Recovery_Base = new(290, 0, -1, 0, 0, "", "", "Get_Hit_Recovery_Base", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Get_Hit_Recovery_Per_Level = new(291, 0, -1, 0, 0, "", "", "Get_Hit_Recovery_Per_Level", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Get_Hit_Recovery = new(292, 0, -1, 0, 0, "Get_Hit_Recovery_Base + (Get_Hit_Recovery_Per_Level * Level)", "", "Get_Hit_Recovery", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Get_Hit_Damage = new(293, 0, -1, 0, 0, "", "", "Get_Hit_Damage", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Get_Hit_Damage_Scalar = new(294, 0, -1, 0, 0, "", "", "Get_Hit_Damage_Scalar", GameAttributeEncoding.Float16Or32, 136, 0, 0, 0);
        public static readonly GameAttributeF Chill_Duration_Bonus_Percent = new(315, 0, -1, 0, 0, "", "", "Chill_Duration_Bonus_Percent", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Freeze_Duration_Bonus_Percent = new(316, 0, -1, 0, 0, "", "", "Freeze_Duration_Bonus_Percent", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Stun_Duration_Bonus_Percent = new(317, 0, -1, 0, 0, "", "", "Stun_Duration_Bonus_Percent", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Immobilize_Duration_Bonus_Percent = new(318, 0, -1, 0, 0, "", "", "Immobilize_Duration_Bonus_Percent", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Fear_Duration_Bonus_Percent = new(319, 0, -1, 0, 0, "", "", "Fear_Duration_Bonus_Percent", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Blind_Duration_Bonus_Percent = new(320, 0, -1, 0, 0, "", "", "Blind_Duration_Bonus_Percent", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Charm_Duration_Bonus_Percent = new(321, 0, -1, 0, 0, "", "", "Charm_Duration_Bonus_Percent", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Slow_Duration_Bonus_Percent = new(322, 0, -1, 0, 0, "", "", "Slow_Duration_Bonus_Percent", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Suffocation_Per_Second = new(334, 0, -1, 0, 0, "", "", "Suffocation_Per_Second", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Suffocation_Unit_Value = new(335, 0, -1, 0, 0, "", "", "Suffocation_Unit_Value", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Resource_On_Hit = new(347, 0, -1, 0, 0, "", "", "Resource_On_Hit", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Resource_On_Hit_Bonus_Pct = new(348, 0, -1, 0, 0, "", "", "Resource_On_Hit_Bonus_Pct", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Resource_On_Hit_Bonus = new(349, 0, -1, 0, 0, "", "", "Resource_On_Hit_Bonus", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Resource_On_Kill = new(350, 0, -1, 0, 0, "", "", "Resource_On_Kill", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Resource_On_Crit = new(351, 0, -1, 0, 0, "", "", "Resource_On_Crit", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_On_Hit = new(352, 0, -1, 0, 0, "", "", "Hitpoints_On_Hit", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_On_Kill = new(353, 0, -1, 0, 0, "", "", "Hitpoints_On_Kill", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_On_Kill_Reduction_Percent = new(354, 0, -1, 0, 0, "", "", "Hitpoints_On_Kill_Reduction_Percent", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Hitpoints_On_Kill_Total = new(355, 0, -1, 0, 0, "Hitpoints_On_Kill * Pin(1-Hitpoints_On_Kill_Reduction_Percent, 0, 2)", "", "Hitpoints_On_Kill_Total", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Damage_To_Mana = new(356, 0, -1, 0, 0, "", "", "Damage_To_Mana", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Damage_Power_Delta = new(358, 0, -1, 0, 0, "", "", "Damage_Power_Delta", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Damage_Power_Min = new(359, 0, -1, 0, 0, "", "", "Damage_Power_Min", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Last_Damage_Amount = new(375, -1, -1, 0, 0, "", "", "Last_Damage_Amount", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Breakable_Shield_HP = new(534, 0, -1, 0, 0, "", "", "Breakable_Shield_HP", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF DPS = new(679, 0, -1, 0, 0, "", "", "DPS", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Freeze_Damage = new(681, 0, -1, 0, 0, "", "", "Freeze_Damage", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Freeze_Capacity = new(682, 0, -1, 0, 0, "", "", "Freeze_Capacity", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Thaw_Rate = new(683, 0, -1, 0, 0, "", "", "Thaw_Rate", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Chilled_Dur_Bonus_Percent = new(684, 0, -1, 0, 0, "", "", "Chilled_Dur_Bonus_Percent", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF DOT_DPS = new(685, 0, -1, 0, 0, "", "", "DOT_DPS", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF CrowdControl_Reduction = new(707, 0, -1, 0, 0, "", "", "CrowdControl_Reduction", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Monster_Play_Get_Hit_Bonus = new(765, 0, -1, 0, 0, "", "", "Monster_Play_Get_Hit_Bonus", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF On_Hit_Bleed_Proc_Damage_Base = new(1126, 0, -1, 0, 0, "", "", "On_Hit_Bleed_Proc_Damage_Base", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF On_Hit_Bleed_Proc_Damage_Delta = new(1127, 0, -1, 0, 0, "", "", "On_Hit_Bleed_Proc_Damage_Delta", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Base = new(1149, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Bleed_Proc_Damage_Base", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Delta = new(1150, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Bleed_Proc_Damage_Delta", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Chance = new(1151, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Percent_Bleed_Proc_Chance", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Damage = new(1152, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Percent_Bleed_Proc_Damage", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Duration = new(1153, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Percent_Bleed_Proc_Duration", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Base_MainHand = new(1181, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Bleed_Proc_Damage_Base_MainHand", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Base_OffHand = new(1182, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Bleed_Proc_Damage_Base_OffHand", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Base_CurrentHand = new(1183, 0, -1, 0, 0, "(DualWield_Hand ? Weapon_On_Hit_Bleed_Proc_Damage_Base_OffHand : Weapon_On_Hit_Bleed_Proc_Damage_Base_MainHand)", "", "Weapon_On_Hit_Bleed_Proc_Damage_Base_CurrentHand", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Delta_MainHand = new(1184, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Bleed_Proc_Damage_Delta_MainHand", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Delta_OffHand = new(1185, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Bleed_Proc_Damage_Delta_OffHand", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Bleed_Proc_Damage_Delta_CurrentHand = new(1186, 0, -1, 0, 0, "(DualWield_Hand ? Weapon_On_Hit_Bleed_Proc_Damage_Delta_OffHand : Weapon_On_Hit_Bleed_Proc_Damage_Delta_MainHand)", "", "Weapon_On_Hit_Bleed_Proc_Damage_Delta_CurrentHand", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Chance_MainHand = new(1187, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Percent_Bleed_Proc_Chance_MainHand", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Chance_OffHand = new(1188, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Percent_Bleed_Proc_Chance_OffHand", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Chance_CurrentHand = new(1189, 0, -1, 0, 0, "(DualWield_Hand ? Weapon_On_Hit_Percent_Bleed_Proc_Chance_OffHand : Weapon_On_Hit_Percent_Bleed_Proc_Chance_MainHand)", "", "Weapon_On_Hit_Percent_Bleed_Proc_Chance_CurrentHand", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Damage_MainHand = new(1190, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Percent_Bleed_Proc_Damage_MainHand", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Damage_Base_OffHand = new(1191, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Percent_Bleed_Proc_Damage_Base_OffHand", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Damage_Base_CurrentHand = new(1192, 0, -1, 0, 0, "(DualWield_Hand ? Weapon_On_Hit_Percent_Bleed_Proc_Damage_Base_OffHand : Weapon_On_Hit_Percent_Bleed_Proc_Damage_MainHand)", "", "Weapon_On_Hit_Percent_Bleed_Proc_Damage_Base_CurrentHand", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Duration_MainHand = new(1193, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Percent_Bleed_Proc_Duration_MainHand", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Duration_OffHand = new(1194, 0, -1, 0, 0, "", "", "Weapon_On_Hit_Percent_Bleed_Proc_Duration_OffHand", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Weapon_On_Hit_Percent_Bleed_Proc_Duration_CurrentHand = new(1195, 0, -1, 0, 0, "", "(DualWield_Hand ? Weapon_On_Hit_Percent_Bleed_Proc_Duration_OffHand : Weapon_On_Hit_Percent_Bleed_Proc_Duration_MainHand)", "Weapon_On_Hit_Percent_Bleed_Proc_Duration_CurrentHand", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF CrowdControl_Resistance = new(1296, 0, -1, 0, 0, "", "", "CrowdControl_Resistance", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF CrowdControl_Projected_End_Time = new(1297, 0, -1, 0, 0, "", "", "CrowdControl_Projected_End_Time", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Seasonal_Legendary_Chance = new(1304, 0, -1, 0, 0, "", "", "Seasonal_Legendary_Chance", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Class_Damage_Reduction_Percent_PVP = new(1313, 0, -1, 0, 0, "", "", "Class_Damage_Reduction_Percent_PVP", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Experience_Bonus_Percent_IGR_Buff = new(1327, 0, -1, 0, 0, "", "", "Experience_Bonus_Percent_IGR_Buff", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Experience_Bonus_Percent_Anniversary_Buff = new(1328, 0, -1, 0, 0, "", "", "Experience_Bonus_Percent_Anniversary_Buff", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Experience_Bonus_Percent_Community_Buff = new(1329, 0, -1, 0, 0, "", "", "Experience_Bonus_Percent_Community_Buff", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Experience_Bonus_Percent_Potion_Buff = new(1330, 0, -1, 0, 0, "", "", "Experience_Bonus_Percent_Potion_Buff", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Experience_Bonus_Percent_Super_Scalar = new(1331, 0, -1, 0, 0, "", "", "Experience_Bonus_Percent_Super_Scalar", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Experience_Bonus_Percent_Super_Scalar_Total = new(1332, 0, -1, 0, 0, "(Experience_Bonus_Percent_Super_Scalar + 1) * (Experience_Bonus_Percent_Community_Buff + 1) * (Experience_Bonus_Percent_IGR_Buff + 1) * (Experience_Bonus_Percent_Anniversary_Buff + 1) * (Experience_Bonus_Percent_Potion_Buff + 1)", "", "Experience_Bonus_Percent_Super_Scalar_Total", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeF Bloodshard_Bonus_Percent_Potion_Buff = new(1417, 0, -1, 0, 0, "", "", "Bloodshard_Bonus_Percent_Potion_Buff", GameAttributeEncoding.Float16Or32, 0, 0, 0, 0);
        public static readonly GameAttributeI DualWield_Hand = new(4, 0, -1, 0, 0, "", "", "DualWield_Hand", GameAttributeEncoding.Int, 0, 0, 2, 2);
        public static readonly GameAttributeI DualWield_Hand_Next = new(5, 0, -1, 0, 0, "", "", "DualWield_Hand_Next", GameAttributeEncoding.Int, 0, 0, 2, 2);
        public static readonly GameAttributeB DualWield_Hands_Swapped = new(6, 0, -1, 0, 0, "", "", "DualWield_Hands_Swapped", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Backpack_Slots = new(8, 0, -1, 0, 0, "", "", "Backpack_Slots", GameAttributeEncoding.Int, 136, 0, 128, 8);
        public static readonly GameAttributeI Shared_Stash_Slots = new(9, 0, -1, 0, 0, "", "", "Shared_Stash_Slots", GameAttributeEncoding.Int, 136, 0, 910, 10);
        public static readonly GameAttributeI Primary_Damage_Attribute = new(30, -1, -1, 0, 0, "", "", "Primary_Damage_Attribute", GameAttributeEncoding.Int, 0, -1, 3, 3);
        public static readonly GameAttributeI Level = new(57, 0, -1, 0, 0, "", "", "Level", GameAttributeEncoding.IntMinMax, 222, -1, 99, 7);
        public static readonly GameAttributeI Level_Cap = new(58, 0, -1, 0, 0, "", "", "Level_Cap", GameAttributeEncoding.IntMinMax, 1, -1, 70, 7);
        public static readonly GameAttributeI Alt_Level = new(59, 0, -1, 0, 0, "", "", "Alt_Level", GameAttributeEncoding.IntMinMax, 1, -1, 20000, 15);
        public static readonly GameAttributeB Magic_And_Gold_Find_Suppressed = new(66, 0, -1, 0, 0, "", "", "Magic_And_Gold_Find_Suppressed", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Resource_Cost_Reduction_Amount = new(69, 0, -1, 0, 0, "", "", "Resource_Cost_Reduction_Amount", GameAttributeEncoding.Int, 0, -4095, 16383, 15);
        public static readonly GameAttributeB Healing_Well_Restores_Resource = new(76, 0, -1, 0, 0, "", "", "Healing_Well_Restores_Resource", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Skill = new(100, 0, -1, 0, 0, "", "", "Skill", GameAttributeEncoding.Int, 136, 0, 4095, 12);
        public static readonly GameAttributeI Skill_From_Item = new(101, 0, -1, 0, 0, "", "", "Skill_From_Item", GameAttributeEncoding.IntMinMax, 136, 0, 1, 1);
        public static readonly GameAttributeI Skill_Total = new(102, 0, -1, 0, 0, "Pin(Skill + Skill_From_Item, 0, 1)", "", "Skill_Total", GameAttributeEncoding.Int, 136, 0, 4095, 12);
        public static readonly GameAttributeI TeamID = new(103, -1, -1, 1, 1, "", "", "TeamID", GameAttributeEncoding.IntMinMax, 222, -1, 23, 5);
        public static readonly GameAttributeI Team_Override = new(104, -1, -1, 0, 0, "", "", "Team_Override", GameAttributeEncoding.IntMinMax, 222, -1, 23, 5);
        public static readonly GameAttributeB Invulnerable = new(105, 0, -1, 0, 0, "", "", "Invulnerable", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Loading = new(106, 0, -1, 0, 0, "", "", "Loading", GameAttributeEncoding.IntMinMax, 222, 0, 1, 1);
        public static readonly GameAttributeB Loading_NewGame = new(110, 0, -1, 0, 0, "", "", "Loading_NewGame", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Auto_Porting_To_Save_Point = new(111, 0, -1, 0, 0, "", "", "Auto_Porting_To_Save_Point", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB No_Damage = new(112, 0, -1, 0, 0, "", "", "No_Damage", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB No_AutoPickup = new(113, 0, -1, 0, 0, "", "", "No_AutoPickup", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Hitpoints_Granted_Duration = new(121, 0, -1, 0, 0, "", "", "Hitpoints_Granted_Duration", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeB Hitpoints_Frozen = new(138, 0, -1, 0, 0, "", "", "Hitpoints_Frozen", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Healing_Suppressed = new(139, 0, -1, 0, 0, "", "", "Healing_Suppressed", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Resource_Type_Primary = new(148, -1, -1, 3, 1, "", "", "Resource_Type_Primary", GameAttributeEncoding.Int, 128, -1, 9, 4);
        public static readonly GameAttributeI Resource_Type_Secondary = new(149, -1, -1, 3, 1, "", "", "Resource_Type_Secondary", GameAttributeEncoding.Int, 128, -1, 9, 4);
        public static readonly GameAttributeI Resource_Granted_Duration = new(156, 0, 10, 0, 0, "", "", "Resource_Granted_Duration", GameAttributeEncoding.Int, 136, 0, 16777215, 24);
        public static readonly GameAttributeB Resource_Regen_Stop_Regen = new(161, 0, 10, 0, 0, "", "", "Resource_Regen_Stop_Regen", GameAttributeEncoding.IntMinMax, 136, 0, 1, 1);
        public static readonly GameAttributeI Highest_Solo_Rift_Level = new(167, 0, -1, 0, 0, "", "", "Highest_Solo_Rift_Level", GameAttributeEncoding.Int, 0, 0, 511, 9);
        public static readonly GameAttributeI Highest_Unlocked_Rift_Level = new(168, 13, -1, 0, 0, "", "", "Highest_Unlocked_Rift_Level", GameAttributeEncoding.Int, 0, 0, 511, 9);
        public static readonly GameAttributeI Last_Rift_Started_Level = new(169, 0, -1, 0, 0, "", "", "Last_Rift_Started_Level", GameAttributeEncoding.Int, 0, 0, 511, 9);
        public static readonly GameAttributeI Highest_Hero_Solo_Rift_Level = new(170, 0, -1, 0, 0, "", "", "Highest_Hero_Solo_Rift_Level", GameAttributeEncoding.Int, 0, 0, 511, 9);
        public static readonly GameAttributeB Always_Hits = new(191, 0, -1, 0, 0, "", "", "Always_Hits", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Cannot_Dodge = new(285, 0, -1, 0, 0, "", "", "Cannot_Dodge", GameAttributeEncoding.IntMinMax, 136, 0, 1, 1);
        public static readonly GameAttributeB Ignores_Critical_Hits = new(297, 0, -1, 0, 0, "", "", "Ignores_Critical_Hits", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Immunity = new(298, 0, -1, 0, 0, "", "", "Immunity", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Untargetable = new(299, 0, -1, 1, 1, "", "", "Untargetable", GameAttributeEncoding.Int, 222, 0, 1, 1);
        public static readonly GameAttributeB Immobolize = new(300, 0, -1, 0, 0, "", "", "Immobolize", GameAttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly GameAttributeB Immune_To_Knockback = new(301, 0, -1, 0, 0, "", "", "Immune_To_Knockback", GameAttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly GameAttributeB Power_Immobilize = new(302, 0, -1, 0, 0, "", "", "Power_Immobilize", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Stunned = new(307, 0, -1, 0, 0, "", "", "Stunned", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Stun_Immune = new(308, 0, -1, 0, 0, "", "", "Stun_Immune", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Bleeding = new(310, 0, -1, 0, 0, "", "", "Bleeding", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Chilled = new(312, 0, -1, 0, 0, "", "", "Chilled", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Freeze_Immune = new(314, 0, -1, 0, 0, "", "", "Freeze_Immune", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Webbed = new(323, 0, -1, 0, 0, "", "", "Webbed", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Slow = new(324, 0, -1, 0, 0, "", "", "Slow", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB FireAura = new(325, 0, -1, 0, 0, "", "", "FireAura", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB LightningAura = new(326, 0, -1, 0, 0, "", "", "LightningAura", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB ColdAura = new(327, 0, -1, 0, 0, "", "", "ColdAura", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB PoisonAura = new(328, 0, -1, 0, 0, "", "", "PoisonAura", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Blind = new(329, 0, -1, 0, 0, "", "", "Blind", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Enraged = new(330, 0, -1, 0, 0, "", "", "Enraged", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Slowdown_Immune = new(331, 0, -1, 0, 0, "", "", "Slowdown_Immune", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Gethit_Immune = new(332, 0, -1, 0, 0, "", "", "Gethit_Immune", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB AttackSpeed_Reduction_Immune = new(333, 0, -1, 0, 0, "", "", "AttackSpeed_Reduction_Immune", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Thorns_Has_Damage_Type = new(343, 0, -1, 0, 0, "", "", "Thorns_Has_Damage_Type", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Skill_Toggled_State = new(369, 0, -1, 0, 0, "", "", "Skill_Toggled_State", GameAttributeEncoding.IntMinMax, 1, 0, 1, 1);
        public static readonly GameAttributeI Skill_Charges = new(370, 0, -1, 0, 0, "", "", "Skill_Charges", GameAttributeEncoding.Int, 1, 0, 99, 7);
        public static readonly GameAttributeI Difficulty = new(374, -1, -1, 0, 0, "", "", "Difficulty", GameAttributeEncoding.Int, 136, -1, 6, 3);
        public static readonly GameAttributeB In_Knockback = new(376, 0, -1, 0, 0, "", "", "In_Knockback", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Item_Quality_Level = new(383, -1, -1, 4, 1, "", "", "Item_Quality_Level", GameAttributeEncoding.IntMinMax, 8, -1, 11, 4);
        public static readonly GameAttributeI Item_Quality_Level_Identified = new(384, -1, -1, 4, 1, "", "", "Item_Quality_Level_Identified", GameAttributeEncoding.IntMinMax, 8, -1, 11, 4);
        public static readonly GameAttributeB Item_Equipped = new(386, 0, -1, 0, 0, "", "", "Item_Equipped", GameAttributeEncoding.IntMinMax, 8, 0, 1, 1);
        public static readonly GameAttributeI Sockets = new(391, 0, -1, 0, 1, "", "0", "Sockets", GameAttributeEncoding.Int, 8, 0, 3, 2);
        public static readonly GameAttributeI Sockets_Filled = new(392, 0, -1, 0, 1, "", "0", "Sockets_Filled", GameAttributeEncoding.Int, 8, 0, 3, 2);
        public static readonly GameAttributeI Item_Binding_Level_Override = new(396, 0, -1, 0, 0, "0", "", "Item_Binding_Level_Override", GameAttributeEncoding.Int, 8, 0, 4, 3);
        public static readonly GameAttributeI Item_Targeted_Player_Class = new(398, -1, -1, 0, 0, "0", "", "Item_Targeted_Player_Class", GameAttributeEncoding.Int, 8, -1, 7, 4);
        public static readonly GameAttributeI Item_Targeted_Hireling_Class = new(399, 0, -1, 0, 0, "0", "", "Item_Targeted_Hireling_Class", GameAttributeEncoding.Int, 8, 0, 4, 3);
        public static readonly GameAttributeI Run_Speed_Duration = new(403, 0, -1, 0, 0, "", "", "Run_Speed_Duration", GameAttributeEncoding.Int, 136, 0, 16777215, 24);
        public static readonly GameAttributeB IsCrafted = new(406, 0, -1, 0, 0, "0", "", "IsCrafted", GameAttributeEncoding.IntMinMax, 8, 0, 1, 1);
        public static readonly GameAttributeB IsVendorBought = new(407, 0, -1, 0, 0, "", "", "IsVendorBought", GameAttributeEncoding.IntMinMax, 8, 0, 1, 1);
        public static readonly GameAttributeI DyeType = new(408, 0, -1, 0, 0, "0", "", "DyeType", GameAttributeEncoding.Int, 8, -1, 30, 5);
        public static readonly GameAttributeB Loot_2_0_Drop = new(409, 0, -1, 0, 0, "", "", "Loot_2_0_Drop", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Post_2_1_2_Drop = new(410, 0, -1, 0, 0, "", "", "Post_2_1_2_Drop", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Post_2_1_3_Drop_ = new(411, 0, -1, 0, 0, "", "", "Post_2_1_3_Drop", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Post_2_5_0_Drop = new(412, 0, -1, 0, 0, "", "", "Post_2_5_0_Drop", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Ancient_Rank = new(413, 0, -1, 0, 0, "", "", "Ancient_Rank", GameAttributeEncoding.Int, 8, 0, 2, 2);
        public static readonly GameAttributeB Unidentified = new(414, 0, -1, 0, 0, "", "", "Unidentified", GameAttributeEncoding.IntMinMax, 8, 0, 1, 1);
        public static readonly GameAttributeB RemoveLevelReq = new(415, 0, -1, 0, 0, "", "", "RemoveLevelReq", GameAttributeEncoding.IntMinMax, 8, 0, 1, 1);
        public static readonly GameAttributeB ConsumableAddSockets = new(416, 0, -1, 0, 0, "", "", "ConsumableAddSockets", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB AddSocketsType_Weapon = new(417, 0, -1, 0, 0, "", "", "AddSocketsType_Weapon", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB AddSocketsType_Offhand = new(418, 0, -1, 0, 0, "", "", "AddSocketsType_Offhand", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB AddSocketsType_Legs = new(419, 0, -1, 0, 0, "", "", "AddSocketsType_Legs", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB AddSocketsType_Chest = new(420, 0, -1, 0, 0, "", "", "AddSocketsType_Chest", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB AddSocketsType_Helm = new(421, 0, -1, 0, 0, "", "", "AddSocketsType_Helm", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB AddSocketsType_Jewelry = new(422, 0, -1, 0, 0, "", "", "AddSocketsType_Jewelry", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Always_Plays_GetHit = new(438, 0, -1, 0, 0, "", "", "Always_Plays_GetHit", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Hidden = new(439, 0, -1, 0, 0, "", "", "Hidden", GameAttributeEncoding.IntMinMax, 136, 0, 1, 1);
        public static readonly GameAttributeI Attack_Cooldown_Min = new(444, 0, -1, 0, 0, "", "", "Attack_Cooldown_Min", GameAttributeEncoding.Int, 136, 0, 16777215, 24);
        public static readonly GameAttributeI Attack_Cooldown_Delta = new(445, 0, -1, 0, 0, "", "", "Attack_Cooldown_Delta", GameAttributeEncoding.Int, 136, 0, 16777215, 24);
        public static readonly GameAttributeI InitialCooldownMinTotal = new(446, 0, -1, 0, 0, "InitialCooldownMin / Attacks_Per_Second_Total", "", "InitialCooldownMinTotal", GameAttributeEncoding.Int, 136, 0, 16777215, 24);
        public static readonly GameAttributeI InitialCooldownDeltaTotal = new(447, 0, -1, 0, 0, "InitialCooldownDelta / Attacks_Per_Second_Total", "", "InitialCooldownDeltaTotal", GameAttributeEncoding.Int, 136, 0, 16777215, 24);
        public static readonly GameAttributeI Attack_Cooldown_Min_Total = new(448, 0, -1, 0, 0, "Attack_Cooldown_Min / Attacks_Per_Second_Total", "", "Attack_Cooldown_Min_Total", GameAttributeEncoding.Int, 136, 0, 16777215, 24);
        public static readonly GameAttributeI Attack_Cooldown_Delta_Total = new(449, 0, -1, 0, 0, "Attack_Cooldown_Delta / Attacks_Per_Second_Total", "", "Attack_Cooldown_Delta_Total", GameAttributeEncoding.Int, 136, 0, 16777215, 24);
        public static readonly GameAttributeI Closing_Cooldown_Min_Total = new(450, 0, -1, 0, 0, "", "", "Closing_Cooldown_Min_Total", GameAttributeEncoding.Int, 136, 0, 16777215, 24);
        public static readonly GameAttributeI Closing_Cooldown_Delta_Total = new(451, 0, -1, 0, 0, "", "", "Closing_Cooldown_Delta_Total", GameAttributeEncoding.Int, 136, 0, 16777215, 24);
        public static readonly GameAttributeB Quest_Monster = new(452, 0, -1, 0, 0, "", "", "Quest_Monster", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Removes_Body_On_Death = new(455, 0, -1, 0, 0, "", "", "Removes_Body_On_Death", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI InitialCooldownMin = new(456, 0, -1, 0, 0, "", "", "InitialCooldownMin", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI InitialCooldownDelta = new(457, 0, -1, 0, 0, "", "", "InitialCooldownDelta", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeB UntargetableByPets = new(459, 0, -1, 0, 0, "", "", "UntargetableByPets", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Damage_State_Current = new(460, 0, -1, 0, 0, "", "", "Damage_State_Current", GameAttributeEncoding.Int, 0, 0, 15, 4);
        public static readonly GameAttributeI Damage_State_Max = new(461, 0, -1, 0, 0, "", "", "Damage_State_Max", GameAttributeEncoding.Int, 0, 0, 15, 4);
        public static readonly GameAttributeB Is_Player_Decoy = new(462, 0, -1, 0, 0, "", "", "Is_Player_Decoy", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Gizmo_State = new(464, -1, -1, 3, 1, "", "", "Gizmo_State", GameAttributeEncoding.IntMinMax, 4, -1, 30, 5);
        public static readonly GameAttributeI Gizmo_Charges = new(465, 0, -1, 1, 1, "", "", "Gizmo_Charges", GameAttributeEncoding.Int, 4, -1, 30, 5);
        public static readonly GameAttributeB Chest_Open = new(466, 0, -1, 0, 0, "", "", "Chest_Open", GameAttributeEncoding.IntMinMax, 4, 0, 1, 1);
        public static readonly GameAttributeB Door_Locked = new(467, 0, -1, 0, 0, "", "", "Door_Locked", GameAttributeEncoding.IntMinMax, 4, 0, 1, 1);
        public static readonly GameAttributeB Gizmo_Disabled_By_Script = new(469, 0, -1, 0, 0, "", "", "Gizmo_Disabled_By_Script", GameAttributeEncoding.IntMinMax, 222, 0, 1, 1);
        public static readonly GameAttributeB Gizmo_Has_Been_Operated = new(475, 0, -1, 1, 1, "", "", "Gizmo_Has_Been_Operated", GameAttributeEncoding.IntMinMax, 4, 0, 1, 1);
        public static readonly GameAttributeB Banner_Usable = new(476, 0, -1, 0, 0, "", "", "Banner_Usable", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Banner_Player_In_Combat = new(477, 0, -1, 0, 0, "", "", "Banner_Player_In_Combat", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Pet_Owner = new(478, -1, -1, 0, 0, "", "", "Pet_Owner", GameAttributeEncoding.Int, 222, -1, 8, 4);
        public static readonly GameAttributeI Pet_Creator = new(479, -1, -1, 0, 0, "", "", "Pet_Creator", GameAttributeEncoding.Int, 222, -1, 8, 4);
        public static readonly GameAttributeI Pet_Type  =  new(480,  -1,  -1,  0,  0,  "",  "",  "Pet_Type",  GameAttributeEncoding.Int,  222,  -1,  77,  7);
        public static readonly GameAttributeB DropsNoLoot = new(481, 0, -1, 0, 0, "", "", "DropsNoLoot", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB GrantsNoXP = new(482, 0, -1, 0, 0, "", "", "GrantsNoXP", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Hireling_Class = new(483, 0, -1, 0, 0, "", "", "Hireling_Class", GameAttributeEncoding.Int, 222, 0, 4, 3);
        public static readonly GameAttributeB Pet_Cannot_Be_Dismissed = new(486, 0, -1, 0, 0, "", "", "Pet_Cannot_Be_Dismissed", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Is_NPC = new(487, 0, -1, 1, 1, "", "", "Is_NPC", GameAttributeEncoding.IntMinMax, 222, 0, 1, 1);
        public static readonly GameAttributeB NPC_Is_Operatable = new(488, 0, -1, 1, 1, "", "", "NPC_Is_Operatable", GameAttributeEncoding.IntMinMax, 222, 0, 1, 1);
        public static readonly GameAttributeB NPC_Is_Escorting = new(489, 0, -1, 1, 1, "", "", "NPC_Is_Escorting", GameAttributeEncoding.IntMinMax, 222, 0, 1, 1);
        public static readonly GameAttributeB NPC_Has_Interact_Options = new(490, 0, 12, 1, 1, "", "", "NPC_Has_Interact_Options", GameAttributeEncoding.IntMinMax, 222, 0, 1, 1);
        public static readonly GameAttributeI Conversation_Icon = new(491, -1, -1, 0, 0, "", "", "Conversation_Icon", GameAttributeEncoding.Int, 222, -1, 6, 3);
        public static readonly GameAttributeI Conversation_Icon_Override = new(492, -1, -1, 0, 0, "", "", "Conversation_Icon_Override", GameAttributeEncoding.Int, 222, -1, 6, 3);
        public static readonly GameAttributeB Is_Helper = new(497, 0, -1, 0, 0, "", "", "Is_Helper", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Current_WeaponClass = new(535, -1, -1, 0, 0, "", "", "Current_WeaponClass", GameAttributeEncoding.Int, 0, -1, 28, 5);
        public static readonly GameAttributeB Weapons_Sheathed = new(536, 0, -1, 0, 0, "", "", "Weapons_Sheathed", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Held_In_OffHand = new(537, 0, -1, 0, 0, "0", "", "Held_In_OffHand", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB In_Combat = new(551, 0, -1, 0, 0, "", "", "In_Combat", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB In_Combat_Next_Tick_Check = new(552, 0, -1, 0, 0, "", "", "In_Combat_Next_Tick_Check", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB In_Conversation = new(553, 0, -1, 0, 0, "", "", "In_Conversation", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Potion_Dilution_Duration = new(558, -1, -1, 0, 0, "", "", "Potion_Dilution_Duration", GameAttributeEncoding.Int, 0, -1, 16777214, 24);
        public static readonly GameAttributeB Feared = new(560, 0, -1, 0, 0, "", "", "Feared", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Fear_Immune = new(561, 0, -1, 0, 0, "", "", "Fear_Immune", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Damage_Type_Override = new(566, -1, -1, 0, 0, "", "", "Damage_Type_Override", GameAttributeEncoding.Int, 0, -1, 6, 3);
        public static readonly GameAttributeB Pet_Dont_Kill_When_Entering_Rifts = new(570, 0, -1, 0, 0, "", "", "Pet_Dont_Kill_When_Entering_Rifts", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Champion_Ghostly = new(582, 0, -1, 0, 0, "", "", "Champion_Ghostly", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Base_Element = new(583, -1, -1, 0, 0, "", "", "Base_Element", GameAttributeEncoding.Int, 0, -1, 7, 4);
        public static readonly GameAttributeB Projectile_Reflect_Has_Damage_Cap = new(588, 0, -1, 0, 0, "", "", "Projectile_Reflect_Has_Damage_Cap", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Buff_Visual_Effect = new(593, 0, -1, 0, 0, "", "", "Buff_Visual_Effect", GameAttributeEncoding.IntMinMax, 136, 0, 1, 1);
        public static readonly GameAttributeB Could_Have_Ragdolled = new(658, 0, -1, 0, 0, "", "", "Could_Have_Ragdolled", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Scale_Bonus_Is_Immediate = new(661, 0, -1, 0, 0, "", "", "Scale_Bonus_Is_Immediate", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Deleted_On_Server = new(662, 0, -1, 0, 0, "", "", "Deleted_On_Server", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Does_No_Damage = new(664, 0, -1, 0, 0, "", "", "Does_No_Damage", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Does_Fake_Damage = new(665, 0, -1, 0, 0, "", "", "Does_Fake_Damage", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Blocks_Projectiles = new(667, 0, -1, 0, 0, "", "", "Blocks_Projectiles", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Frozen = new(668, 0, -1, 0, 0, "", "", "Frozen", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Uninterruptible = new(674, 0, -1, 0, 0, "", "", "Uninterruptible", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB CantStartDisplayedPowers = new(676, 0, -1, 0, 0, "", "", "CantStartDisplayedPowers", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB GizmosIgnoreCantStartDisplayedPowers = new(677, 0, -1, 0, 0, "", "", "GizmosIgnoreCantStartDisplayedPowers", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB IsRooted = new(689, 0, -1, 0, 0, "", "", "IsRooted", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Hide_Affixes = new(694, 0, -1, 0, 0, "", "", "Hide_Affixes", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Rune_A = new(695, 0, -1, 0, 0, "", "", "Rune_A", GameAttributeEncoding.Int, 0, 0, 255, 8);
        public static readonly GameAttributeI Rune_B = new(696, 0, -1, 0, 0, "", "", "Rune_B", GameAttributeEncoding.Int, 0, 0, 255, 8);
        public static readonly GameAttributeI Rune_C = new(697, 0, -1, 0, 0, "", "", "Rune_C", GameAttributeEncoding.Int, 0, 0, 255, 8);
        public static readonly GameAttributeI Rune_D = new(698, 0, -1, 0, 0, "", "", "Rune_D", GameAttributeEncoding.Int, 0, 0, 255, 8);
        public static readonly GameAttributeI Rune_E = new(699, 0, -1, 0, 0, "", "", "Rune_E", GameAttributeEncoding.Int, 0, 0, 255, 8);
        public static readonly GameAttributeB Displays_Team_Effect = new(708, 0, -1, 0, 0, "", "", "Displays_Team_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Cannot_Be_Added_To_AI_Target_List = new(709, 0, -1, 0, 0, "", "", "Cannot_Be_Added_To_AI_Target_List", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Immune_To_Charm = new(711, 0, -1, 0, 0, "", "", "Immune_To_Charm", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Immune_To_Blind = new(712, 0, -1, 0, 0, "", "", "Immune_To_Blind", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Damage_Shield = new(713, 0, -1, 0, 0, "", "", "Damage_Shield", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Follow_Target_Type = new(717, 0, -1, 0, 0, "", "", "Follow_Target_Type", GameAttributeEncoding.Int, 0, 0, 2, 2);
        public static readonly GameAttributeB Stealthed = new(725, 0, -1, 0, 0, "", "", "Stealthed", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI GemQuality = new(726, 0, -1, 0, 0, "", "", "GemQuality", GameAttributeEncoding.Int, 0, 0, 32, 6);
        public static readonly GameAttributeB Attachment_Handled_By_Client = new(733, 0, -1, 0, 0, "", "", "Attachment_Handled_By_Client", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB AI_In_Special_State = new(734, 0, -1, 0, 0, "", "", "AI_In_Special_State", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB AI_Used_Scripted_Spawn_Anim = new(735, 0, -1, 0, 0, "", "", "AI_Used_Scripted_Spawn_Anim", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB AI_Spawned_By_Inactive_Marker = new(736, 0, -1, 0, 0, "", "", "AI_Spawned_By_Inactive_Marker", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Free_Cast_All = new(750, 0, -1, 0, 0, "", "", "Free_Cast_All", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Kill_Count_Record = new(759, 0, -1, 0, 0, "", "", "Kill_Count_Record", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Object_Destruction_Record = new(760, 0, -1, 0, 0, "", "", "Object_Destruction_Record", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Single_Attack_Record = new(761, 0, -1, 0, 0, "", "", "Single_Attack_Record", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Environment_Attack_Record = new(762, 0, -1, 0, 0, "", "", "Environment_Attack_Record", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Nephalem_Glory_Duration_Record = new(763, 0, -1, 0, 0, "", "", "Nephalem_Glory_Duration_Record", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeB Root_Immune = new(764, 0, -1, 0, 0, "", "", "Root_Immune", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Stored_Contact_Frame = new(766, 0, -1, 0, 0, "", "", "Stored_Contact_Frame", GameAttributeEncoding.Int, 0, 0, 4, 3);
        public static readonly GameAttributeI Buff_Icon_Count0 = new(767, 0, -1, 0, 0, "", "", "Buff_Icon_Count0", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count1 = new(768, 0, -1, 0, 0, "", "", "Buff_Icon_Count1", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count2 = new(769, 0, -1, 0, 0, "", "", "Buff_Icon_Count2", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count3 = new(770, 0, -1, 0, 0, "", "", "Buff_Icon_Count3", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count4 = new(771, 0, -1, 0, 0, "", "", "Buff_Icon_Count4", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count5 = new(772, 0, -1, 0, 0, "", "", "Buff_Icon_Count5", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count6 = new(773, 0, -1, 0, 0, "", "", "Buff_Icon_Count6", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count7 = new(774, 0, -1, 0, 0, "", "", "Buff_Icon_Count7", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count8 = new(775, 0, -1, 0, 0, "", "", "Buff_Icon_Count8", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count9 = new(776, 0, -1, 0, 0, "", "", "Buff_Icon_Count9", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count10 = new(777, 0, -1, 0, 0, "", "", "Buff_Icon_Count10", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count11 = new(778, 0, -1, 0, 0, "", "", "Buff_Icon_Count11", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count12 = new(779, 0, -1, 0, 0, "", "", "Buff_Icon_Count12", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count13 = new(780, 0, -1, 0, 0, "", "", "Buff_Icon_Count13", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count14 = new(781, 0, -1, 0, 0, "", "", "Buff_Icon_Count14", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count15 = new(782, 0, -1, 0, 0, "", "", "Buff_Icon_Count15", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count16 = new(783, 0, -1, 0, 0, "", "", "Buff_Icon_Count16", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count17 = new(784, 0, -1, 0, 0, "", "", "Buff_Icon_Count17", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count18 = new(785, 0, -1, 0, 0, "", "", "Buff_Icon_Count18", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count19 = new(786, 0, -1, 0, 0, "", "", "Buff_Icon_Count19", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count20 = new(787, 0, -1, 0, 0, "", "", "Buff_Icon_Count20", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count21 = new(788, 0, -1, 0, 0, "", "", "Buff_Icon_Count21", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count22 = new(789, 0, -1, 0, 0, "", "", "Buff_Icon_Count22", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count23 = new(790, 0, -1, 0, 0, "", "", "Buff_Icon_Count23", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count24 = new(791, 0, -1, 0, 0, "", "", "Buff_Icon_Count24", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count25 = new(792, 0, -1, 0, 0, "", "", "Buff_Icon_Count25", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count26 = new(793, 0, -1, 0, 0, "", "", "Buff_Icon_Count26", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count27 = new(794, 0, -1, 0, 0, "", "", "Buff_Icon_Count27", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count28 = new(795, 0, -1, 0, 0, "", "", "Buff_Icon_Count28", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count29 = new(796, 0, -1, 0, 0, "", "", "Buff_Icon_Count29", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count30 = new(797, 0, -1, 0, 0, "", "", "Buff_Icon_Count30", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeI Buff_Icon_Count31 = new(798, 0, -1, 0, 0, "", "", "Buff_Icon_Count31", GameAttributeEncoding.Int, 0, 0, 16777215, 24);
        public static readonly GameAttributeB Observer = new(799, 0, -1, 0, 0, "", "", "Observer", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Resurrect_As_Observer = new(800, 0, -1, 0, 0, "", "", "Resurrect_As_Observer", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Combo_Level = new(801, 0, -1, 0, 0, "", "", "Combo_Level", GameAttributeEncoding.Int, 0, 0, 3, 2);
        public static readonly GameAttributeB Burrowed = new(803, 0, -1, 0, 0, "", "", "Burrowed", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Corpse_Resurrection_Charges = new(808, 0, -1, 0, 0, "", "", "Corpse_Resurrection_Charges", GameAttributeEncoding.Int, 0, 0, 15, 4);
        public static readonly GameAttributeB Corpse_Resurrection_Disabled = new(809, 0, -1, 0, 0, "", "", "Corpse_Resurrection_Disabled", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB using_Bossbar = new(812, 0, -1, 0, 0, "", "", "using_Bossbar", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_0_Visual_Effect = new(813, 0, -1, 0, 0, "", "", "Power_Buff_0_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_1_Visual_Effect = new(814, 0, -1, 0, 0, "", "", "Power_Buff_1_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_2_Visual_Effect = new(815, 0, -1, 0, 0, "", "", "Power_Buff_2_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_3_Visual_Effect = new(816, 0, -1, 0, 0, "", "", "Power_Buff_3_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_4_Visual_Effect = new(817, 0, -1, 0, 0, "", "", "Power_Buff_4_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_5_Visual_Effect = new(818, 0, -1, 0, 0, "", "", "Power_Buff_5_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_6_Visual_Effect = new(819, 0, -1, 0, 0, "", "", "Power_Buff_6_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_7_Visual_Effect = new(820, 0, -1, 0, 0, "", "", "Power_Buff_7_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_8_Visual_Effect = new(821, 0, -1, 0, 0, "", "", "Power_Buff_8_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_9_Visual_Effect = new(822, 0, -1, 0, 0, "", "", "Power_Buff_9_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_10_Visual_Effect = new(823, 0, -1, 0, 0, "", "", "Power_Buff_10_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_11_Visual_Effect = new(824, 0, -1, 0, 0, "", "", "Power_Buff_11_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_12_Visual_Effect = new(825, 0, -1, 0, 0, "", "", "Power_Buff_12_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_13_Visual_Effect = new(826, 0, -1, 0, 0, "", "", "Power_Buff_13_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_14_Visual_Effect = new(827, 0, -1, 0, 0, "", "", "Power_Buff_14_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_15_Visual_Effect = new(828, 0, -1, 0, 0, "", "", "Power_Buff_15_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_16_Visual_Effect = new(829, 0, -1, 0, 0, "", "", "Power_Buff_16_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_17_Visual_Effect = new(830, 0, -1, 0, 0, "", "", "Power_Buff_17_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_18_Visual_Effect = new(831, 0, -1, 0, 0, "", "", "Power_Buff_18_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_19_Visual_Effect = new(832, 0, -1, 0, 0, "", "", "Power_Buff_19_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_20_Visual_Effect = new(833, 0, -1, 0, 0, "", "", "Power_Buff_20_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_21_Visual_Effect = new(834, 0, -1, 0, 0, "", "", "Power_Buff_21_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_22_Visual_Effect = new(835, 0, -1, 0, 0, "", "", "Power_Buff_22_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_23_Visual_Effect = new(836, 0, -1, 0, 0, "", "", "Power_Buff_23_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_24_Visual_Effect = new(837, 0, -1, 0, 0, "", "", "Power_Buff_24_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_25_Visual_Effect = new(838, 0, -1, 0, 0, "", "", "Power_Buff_25_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_26_Visual_Effect = new(839, 0, -1, 0, 0, "", "", "Power_Buff_26_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_27_Visual_Effect = new(840, 0, -1, 0, 0, "", "", "Power_Buff_27_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_28_Visual_Effect = new(841, 0, -1, 0, 0, "", "", "Power_Buff_28_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_29_Visual_Effect = new(842, 0, -1, 0, 0, "", "", "Power_Buff_29_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_30_Visual_Effect = new(843, 0, -1, 0, 0, "", "", "Power_Buff_30_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_31_Visual_Effect = new(844, 0, -1, 0, 0, "", "", "Power_Buff_31_Visual_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Busy = new(846, 0, -1, 0, 0, "", "", "Busy", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Afk = new(847, 0, -1, 0, 0, "", "", "Afk", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Resource_Degeneration_Prevented = new(852, 0, -1, 0, 0, "", "", "Resource_Degeneration_Prevented", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Operatable = new(853, 0, -1, 0, 0, "", "", "Operatable", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Has_Look_Override = new(854, 0, -1, 0, 0, "", "", "Has_Look_Override", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Disabled = new(856, 0, -1, 0, 0, "", "", "Disabled", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Skill_Override_Active = new(858, 0, -1, 0, 0, "", "", "Skill_Override_Active", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Skill_Override_Ended = new(859, 0, -1, 0, 0, "", "", "Skill_Override_Ended", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Skill_Override_Ended_Active = new(860, 0, -1, 0, 0, "", "", "Skill_Override_Ended_Active", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Is_Power_Proxy = new(861, 0, -1, 0, 0, "", "", "Is_Power_Proxy", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Force_No_Death_Animation = new(862, 0, -1, 0, 0, "", "", "Force_No_Death_Animation", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Player_WeaponClass_Anim_Override = new(863, -1, -1, 0, 0, "", "", "Player_WeaponClass_Anim_Override", GameAttributeEncoding.Int, 0, -1, 28, 5);
        public static readonly GameAttributeB Operatable_Story_Gizmo = new(864, 0, -1, 0, 0, "", "", "Operatable_Story_Gizmo", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_0_Visual_Effect_None = new(865, 0, -1, 0, 0, "", "", "Power_Buff_0_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_0_Visual_Effect_A = new(866, 0, -1, 0, 0, "", "", "Power_Buff_0_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_0_Visual_Effect_B = new(867, 0, -1, 0, 0, "", "", "Power_Buff_0_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_0_Visual_Effect_C = new(868, 0, -1, 0, 0, "", "", "Power_Buff_0_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_0_Visual_Effect_D = new(869, 0, -1, 0, 0, "", "", "Power_Buff_0_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_0_Visual_Effect_E = new(870, 0, -1, 0, 0, "", "", "Power_Buff_0_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_1_Visual_Effect_None = new(871, 0, -1, 0, 0, "", "", "Power_Buff_1_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_1_Visual_Effect_A = new(872, 0, -1, 0, 0, "", "", "Power_Buff_1_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_1_Visual_Effect_B = new(873, 0, -1, 0, 0, "", "", "Power_Buff_1_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_1_Visual_Effect_C = new(874, 0, -1, 0, 0, "", "", "Power_Buff_1_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_1_Visual_Effect_D = new(875, 0, -1, 0, 0, "", "", "Power_Buff_1_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_1_Visual_Effect_E = new(876, 0, -1, 0, 0, "", "", "Power_Buff_1_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_2_Visual_Effect_None = new(877, 0, -1, 0, 0, "", "", "Power_Buff_2_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_2_Visual_Effect_A = new(878, 0, -1, 0, 0, "", "", "Power_Buff_2_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_2_Visual_Effect_B = new(879, 0, -1, 0, 0, "", "", "Power_Buff_2_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_2_Visual_Effect_C = new(880, 0, -1, 0, 0, "", "", "Power_Buff_2_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_2_Visual_Effect_D = new(881, 0, -1, 0, 0, "", "", "Power_Buff_2_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_2_Visual_Effect_E = new(882, 0, -1, 0, 0, "", "", "Power_Buff_2_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_3_Visual_Effect_None = new(883, 0, -1, 0, 0, "", "", "Power_Buff_3_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_3_Visual_Effect_A = new(884, 0, -1, 0, 0, "", "", "Power_Buff_3_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_3_Visual_Effect_B = new(885, 0, -1, 0, 0, "", "", "Power_Buff_3_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_3_Visual_Effect_C = new(886, 0, -1, 0, 0, "", "", "Power_Buff_3_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_3_Visual_Effect_D = new(887, 0, -1, 0, 0, "", "", "Power_Buff_3_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_3_Visual_Effect_E = new(888, 0, -1, 0, 0, "", "", "Power_Buff_3_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_4_Visual_Effect_None = new(889, 0, -1, 0, 0, "", "", "Power_Buff_4_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_4_Visual_Effect_A = new(890, 0, -1, 0, 0, "", "", "Power_Buff_4_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_4_Visual_Effect_B = new(891, 0, -1, 0, 0, "", "", "Power_Buff_4_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_4_Visual_Effect_C = new(892, 0, -1, 0, 0, "", "", "Power_Buff_4_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_4_Visual_Effect_D = new(893, 0, -1, 0, 0, "", "", "Power_Buff_4_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_4_Visual_Effect_E = new(894, 0, -1, 0, 0, "", "", "Power_Buff_4_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_5_Visual_Effect_None = new(895, 0, -1, 0, 0, "", "", "Power_Buff_5_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_5_Visual_Effect_A = new(896, 0, -1, 0, 0, "", "", "Power_Buff_5_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_5_Visual_Effect_B = new(897, 0, -1, 0, 0, "", "", "Power_Buff_5_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_5_Visual_Effect_C = new(898, 0, -1, 0, 0, "", "", "Power_Buff_5_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_5_Visual_Effect_D = new(899, 0, -1, 0, 0, "", "", "Power_Buff_5_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_5_Visual_Effect_E = new(900, 0, -1, 0, 0, "", "", "Power_Buff_5_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_6_Visual_Effect_None = new(901, 0, -1, 0, 0, "", "", "Power_Buff_6_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_6_Visual_Effect_A = new(902, 0, -1, 0, 0, "", "", "Power_Buff_6_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_6_Visual_Effect_B = new(903, 0, -1, 0, 0, "", "", "Power_Buff_6_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_6_Visual_Effect_C = new(904, 0, -1, 0, 0, "", "", "Power_Buff_6_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_6_Visual_Effect_D = new(905, 0, -1, 0, 0, "", "", "Power_Buff_6_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_6_Visual_Effect_E = new(906, 0, -1, 0, 0, "", "", "Power_Buff_6_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_7_Visual_Effect_None = new(907, 0, -1, 0, 0, "", "", "Power_Buff_7_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_7_Visual_Effect_A = new(908, 0, -1, 0, 0, "", "", "Power_Buff_7_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_7_Visual_Effect_B = new(909, 0, -1, 0, 0, "", "", "Power_Buff_7_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_7_Visual_Effect_C = new(910, 0, -1, 0, 0, "", "", "Power_Buff_7_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_7_Visual_Effect_D = new(911, 0, -1, 0, 0, "", "", "Power_Buff_7_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_7_Visual_Effect_E = new(912, 0, -1, 0, 0, "", "", "Power_Buff_7_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_8_Visual_Effect_None = new(913, 0, -1, 0, 0, "", "", "Power_Buff_8_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_8_Visual_Effect_A = new(914, 0, -1, 0, 0, "", "", "Power_Buff_8_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_8_Visual_Effect_B = new(915, 0, -1, 0, 0, "", "", "Power_Buff_8_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_8_Visual_Effect_C = new(916, 0, -1, 0, 0, "", "", "Power_Buff_8_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_8_Visual_Effect_D = new(917, 0, -1, 0, 0, "", "", "Power_Buff_8_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_8_Visual_Effect_E = new(918, 0, -1, 0, 0, "", "", "Power_Buff_8_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_9_Visual_Effect_None = new(919, 0, -1, 0, 0, "", "", "Power_Buff_9_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_9_Visual_Effect_A = new(920, 0, -1, 0, 0, "", "", "Power_Buff_9_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_9_Visual_Effect_B = new(921, 0, -1, 0, 0, "", "", "Power_Buff_9_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_9_Visual_Effect_C = new(922, 0, -1, 0, 0, "", "", "Power_Buff_9_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_9_Visual_Effect_D = new(923, 0, -1, 0, 0, "", "", "Power_Buff_9_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_9_Visual_Effect_E = new(924, 0, -1, 0, 0, "", "", "Power_Buff_9_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_10_Visual_Effect_None = new(925, 0, -1, 0, 0, "", "", "Power_Buff_10_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_10_Visual_Effect_A = new(926, 0, -1, 0, 0, "", "", "Power_Buff_10_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_10_Visual_Effect_B = new(927, 0, -1, 0, 0, "", "", "Power_Buff_10_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_10_Visual_Effect_C = new(928, 0, -1, 0, 0, "", "", "Power_Buff_10_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_10_Visual_Effect_D = new(929, 0, -1, 0, 0, "", "", "Power_Buff_10_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_10_Visual_Effect_E = new(930, 0, -1, 0, 0, "", "", "Power_Buff_10_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_11_Visual_Effect_None = new(931, 0, -1, 0, 0, "", "", "Power_Buff_11_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_11_Visual_Effect_A = new(932, 0, -1, 0, 0, "", "", "Power_Buff_11_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_11_Visual_Effect_B = new(933, 0, -1, 0, 0, "", "", "Power_Buff_11_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_11_Visual_Effect_C = new(934, 0, -1, 0, 0, "", "", "Power_Buff_11_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_11_Visual_Effect_D = new(935, 0, -1, 0, 0, "", "", "Power_Buff_11_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_11_Visual_Effect_E = new(936, 0, -1, 0, 0, "", "", "Power_Buff_11_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_12_Visual_Effect_None = new(937, 0, -1, 0, 0, "", "", "Power_Buff_12_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_12_Visual_Effect_A = new(938, 0, -1, 0, 0, "", "", "Power_Buff_12_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_12_Visual_Effect_B = new(939, 0, -1, 0, 0, "", "", "Power_Buff_12_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_12_Visual_Effect_C = new(940, 0, -1, 0, 0, "", "", "Power_Buff_12_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_12_Visual_Effect_D = new(941, 0, -1, 0, 0, "", "", "Power_Buff_12_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_12_Visual_Effect_E = new(942, 0, -1, 0, 0, "", "", "Power_Buff_12_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_13_Visual_Effect_None = new(943, 0, -1, 0, 0, "", "", "Power_Buff_13_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_13_Visual_Effect_A = new(944, 0, -1, 0, 0, "", "", "Power_Buff_13_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_13_Visual_Effect_B = new(945, 0, -1, 0, 0, "", "", "Power_Buff_13_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_13_Visual_Effect_C = new(946, 0, -1, 0, 0, "", "", "Power_Buff_13_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_13_Visual_Effect_D = new(947, 0, -1, 0, 0, "", "", "Power_Buff_13_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_13_Visual_Effect_E = new(948, 0, -1, 0, 0, "", "", "Power_Buff_13_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_14_Visual_Effect_None = new(949, 0, -1, 0, 0, "", "", "Power_Buff_14_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_14_Visual_Effect_A = new(950, 0, -1, 0, 0, "", "", "Power_Buff_14_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_14_Visual_Effect_B = new(951, 0, -1, 0, 0, "", "", "Power_Buff_14_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_14_Visual_Effect_C = new(952, 0, -1, 0, 0, "", "", "Power_Buff_14_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_14_Visual_Effect_D = new(953, 0, -1, 0, 0, "", "", "Power_Buff_14_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_14_Visual_Effect_E = new(954, 0, -1, 0, 0, "", "", "Power_Buff_14_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_15_Visual_Effect_None = new(955, 0, -1, 0, 0, "", "", "Power_Buff_15_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_15_Visual_Effect_A = new(956, 0, -1, 0, 0, "", "", "Power_Buff_15_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_15_Visual_Effect_B = new(957, 0, -1, 0, 0, "", "", "Power_Buff_15_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_15_Visual_Effect_C = new(958, 0, -1, 0, 0, "", "", "Power_Buff_15_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_15_Visual_Effect_D = new(959, 0, -1, 0, 0, "", "", "Power_Buff_15_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_15_Visual_Effect_E = new(960, 0, -1, 0, 0, "", "", "Power_Buff_15_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_16_Visual_Effect_None = new(961, 0, -1, 0, 0, "", "", "Power_Buff_16_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_16_Visual_Effect_A = new(962, 0, -1, 0, 0, "", "", "Power_Buff_16_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_16_Visual_Effect_B = new(963, 0, -1, 0, 0, "", "", "Power_Buff_16_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_16_Visual_Effect_C = new(964, 0, -1, 0, 0, "", "", "Power_Buff_16_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_16_Visual_Effect_D = new(965, 0, -1, 0, 0, "", "", "Power_Buff_16_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_16_Visual_Effect_E = new(966, 0, -1, 0, 0, "", "", "Power_Buff_16_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_17_Visual_Effect_None = new(967, 0, -1, 0, 0, "", "", "Power_Buff_17_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_17_Visual_Effect_A = new(968, 0, -1, 0, 0, "", "", "Power_Buff_17_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_17_Visual_Effect_B = new(969, 0, -1, 0, 0, "", "", "Power_Buff_17_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_17_Visual_Effect_C = new(970, 0, -1, 0, 0, "", "", "Power_Buff_17_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_17_Visual_Effect_D = new(971, 0, -1, 0, 0, "", "", "Power_Buff_17_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_17_Visual_Effect_E = new(972, 0, -1, 0, 0, "", "", "Power_Buff_17_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_18_Visual_Effect_None = new(973, 0, -1, 0, 0, "", "", "Power_Buff_18_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_18_Visual_Effect_A = new(974, 0, -1, 0, 0, "", "", "Power_Buff_18_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_18_Visual_Effect_B = new(975, 0, -1, 0, 0, "", "", "Power_Buff_18_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_18_Visual_Effect_C = new(976, 0, -1, 0, 0, "", "", "Power_Buff_18_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_18_Visual_Effect_D = new(977, 0, -1, 0, 0, "", "", "Power_Buff_18_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_18_Visual_Effect_E = new(978, 0, -1, 0, 0, "", "", "Power_Buff_18_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_19_Visual_Effect_None = new(979, 0, -1, 0, 0, "", "", "Power_Buff_19_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_19_Visual_Effect_A = new(980, 0, -1, 0, 0, "", "", "Power_Buff_19_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_19_Visual_Effect_B = new(981, 0, -1, 0, 0, "", "", "Power_Buff_19_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_19_Visual_Effect_C = new(982, 0, -1, 0, 0, "", "", "Power_Buff_19_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_19_Visual_Effect_D = new(983, 0, -1, 0, 0, "", "", "Power_Buff_19_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_19_Visual_Effect_E = new(984, 0, -1, 0, 0, "", "", "Power_Buff_19_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_20_Visual_Effect_None = new(985, 0, -1, 0, 0, "", "", "Power_Buff_20_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_20_Visual_Effect_A = new(986, 0, -1, 0, 0, "", "", "Power_Buff_20_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_20_Visual_Effect_B = new(987, 0, -1, 0, 0, "", "", "Power_Buff_20_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_20_Visual_Effect_C = new(988, 0, -1, 0, 0, "", "", "Power_Buff_20_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_20_Visual_Effect_D = new(989, 0, -1, 0, 0, "", "", "Power_Buff_20_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_20_Visual_Effect_E = new(990, 0, -1, 0, 0, "", "", "Power_Buff_20_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_21_Visual_Effect_None = new(991, 0, -1, 0, 0, "", "", "Power_Buff_21_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_21_Visual_Effect_A = new(992, 0, -1, 0, 0, "", "", "Power_Buff_21_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_21_Visual_Effect_B = new(993, 0, -1, 0, 0, "", "", "Power_Buff_21_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_21_Visual_Effect_C = new(994, 0, -1, 0, 0, "", "", "Power_Buff_21_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_21_Visual_Effect_D = new(995, 0, -1, 0, 0, "", "", "Power_Buff_21_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_21_Visual_Effect_E = new(996, 0, -1, 0, 0, "", "", "Power_Buff_21_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_22_Visual_Effect_None = new(997, 0, -1, 0, 0, "", "", "Power_Buff_22_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_22_Visual_Effect_A = new(998, 0, -1, 0, 0, "", "", "Power_Buff_22_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_22_Visual_Effect_B = new(999, 0, -1, 0, 0, "", "", "Power_Buff_22_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_22_Visual_Effect_C = new(1000, 0, -1, 0, 0, "", "", "Power_Buff_22_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_22_Visual_Effect_D = new(1001, 0, -1, 0, 0, "", "", "Power_Buff_22_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_22_Visual_Effect_E = new(1002, 0, -1, 0, 0, "", "", "Power_Buff_22_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_23_Visual_Effect_None = new(1003, 0, -1, 0, 0, "", "", "Power_Buff_23_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_23_Visual_Effect_A = new(1004, 0, -1, 0, 0, "", "", "Power_Buff_23_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_23_Visual_Effect_B = new(1005, 0, -1, 0, 0, "", "", "Power_Buff_23_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_23_Visual_Effect_C = new(1006, 0, -1, 0, 0, "", "", "Power_Buff_23_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_23_Visual_Effect_D = new(1007, 0, -1, 0, 0, "", "", "Power_Buff_23_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_23_Visual_Effect_E = new(1008, 0, -1, 0, 0, "", "", "Power_Buff_23_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_24_Visual_Effect_None = new(1009, 0, -1, 0, 0, "", "", "Power_Buff_24_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_24_Visual_Effect_A = new(1010, 0, -1, 0, 0, "", "", "Power_Buff_24_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_24_Visual_Effect_B = new(1011, 0, -1, 0, 0, "", "", "Power_Buff_24_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_24_Visual_Effect_C = new(1012, 0, -1, 0, 0, "", "", "Power_Buff_24_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_24_Visual_Effect_D = new(1013, 0, -1, 0, 0, "", "", "Power_Buff_24_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_24_Visual_Effect_E = new(1014, 0, -1, 0, 0, "", "", "Power_Buff_24_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_25_Visual_Effect_None = new(1015, 0, -1, 0, 0, "", "", "Power_Buff_25_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_25_Visual_Effect_A = new(1016, 0, -1, 0, 0, "", "", "Power_Buff_25_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_25_Visual_Effect_B = new(1017, 0, -1, 0, 0, "", "", "Power_Buff_25_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_25_Visual_Effect_C = new(1018, 0, -1, 0, 0, "", "", "Power_Buff_25_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_25_Visual_Effect_D = new(1019, 0, -1, 0, 0, "", "", "Power_Buff_25_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_25_Visual_Effect_E = new(1020, 0, -1, 0, 0, "", "", "Power_Buff_25_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_26_Visual_Effect_None = new(1021, 0, -1, 0, 0, "", "", "Power_Buff_26_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_26_Visual_Effect_A = new(1022, 0, -1, 0, 0, "", "", "Power_Buff_26_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_26_Visual_Effect_B = new(1023, 0, -1, 0, 0, "", "", "Power_Buff_26_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_26_Visual_Effect_C = new(1024, 0, -1, 0, 0, "", "", "Power_Buff_26_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_26_Visual_Effect_D = new(1025, 0, -1, 0, 0, "", "", "Power_Buff_26_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_26_Visual_Effect_E = new(1026, 0, -1, 0, 0, "", "", "Power_Buff_26_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_27_Visual_Effect_None = new(1027, 0, -1, 0, 0, "", "", "Power_Buff_27_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_27_Visual_Effect_A = new(1028, 0, -1, 0, 0, "", "", "Power_Buff_27_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_27_Visual_Effect_B = new(1029, 0, -1, 0, 0, "", "", "Power_Buff_27_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_27_Visual_Effect_C = new(1030, 0, -1, 0, 0, "", "", "Power_Buff_27_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_27_Visual_Effect_D = new(1031, 0, -1, 0, 0, "", "", "Power_Buff_27_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_27_Visual_Effect_E = new(1032, 0, -1, 0, 0, "", "", "Power_Buff_27_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_28_Visual_Effect_None = new(1033, 0, -1, 0, 0, "", "", "Power_Buff_28_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_28_Visual_Effect_A = new(1034, 0, -1, 0, 0, "", "", "Power_Buff_28_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_28_Visual_Effect_B = new(1035, 0, -1, 0, 0, "", "", "Power_Buff_28_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_28_Visual_Effect_C = new(1036, 0, -1, 0, 0, "", "", "Power_Buff_28_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_28_Visual_Effect_D = new(1037, 0, -1, 0, 0, "", "", "Power_Buff_28_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_28_Visual_Effect_E = new(1038, 0, -1, 0, 0, "", "", "Power_Buff_28_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_29_Visual_Effect_None = new(1039, 0, -1, 0, 0, "", "", "Power_Buff_29_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_29_Visual_Effect_A = new(1040, 0, -1, 0, 0, "", "", "Power_Buff_29_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_29_Visual_Effect_B = new(1041, 0, -1, 0, 0, "", "", "Power_Buff_29_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_29_Visual_Effect_C = new(1042, 0, -1, 0, 0, "", "", "Power_Buff_29_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_29_Visual_Effect_D = new(1043, 0, -1, 0, 0, "", "", "Power_Buff_29_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_29_Visual_Effect_E = new(1044, 0, -1, 0, 0, "", "", "Power_Buff_29_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_30_Visual_Effect_None = new(1045, 0, -1, 0, 0, "", "", "Power_Buff_30_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_30_Visual_Effect_A = new(1046, 0, -1, 0, 0, "", "", "Power_Buff_30_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_30_Visual_Effect_B = new(1047, 0, -1, 0, 0, "", "", "Power_Buff_30_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_30_Visual_Effect_C = new(1048, 0, -1, 0, 0, "", "", "Power_Buff_30_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_30_Visual_Effect_D = new(1049, 0, -1, 0, 0, "", "", "Power_Buff_30_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_30_Visual_Effect_E = new(1050, 0, -1, 0, 0, "", "", "Power_Buff_30_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_31_Visual_Effect_None = new(1051, 0, -1, 0, 0, "", "", "Power_Buff_31_Visual_Effect_None", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_31_Visual_Effect_A = new(1052, 0, -1, 0, 0, "", "", "Power_Buff_31_Visual_Effect_A", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_31_Visual_Effect_B = new(1053, 0, -1, 0, 0, "", "", "Power_Buff_31_Visual_Effect_B", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_31_Visual_Effect_C = new(1054, 0, -1, 0, 0, "", "", "Power_Buff_31_Visual_Effect_C", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_31_Visual_Effect_D = new(1055, 0, -1, 0, 0, "", "", "Power_Buff_31_Visual_Effect_D", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Buff_31_Visual_Effect_E = new(1056, 0, -1, 0, 0, "", "", "Power_Buff_31_Visual_Effect_E", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Summoning_Machine_Num_Casters = new(1060, 0, -1, 0, 0, "", "", "Summoning_Machine_Num_Casters", GameAttributeEncoding.Int, 0, 0, 255, 8);
        public static readonly GameAttributeI Summoning_Machine_Spawn_Count = new(1061, 0, -1, 0, 0, "", "", "Summoning_Machine_Spawn_Count", GameAttributeEncoding.Int, 0, 0, 4095, 12);
        public static readonly GameAttributeI Summoning_Machine_Spawn_Team = new(1063, -1, -1, 0, 0, "", "", "Summoning_Machine_Spawn_Team", GameAttributeEncoding.Int, 0, -1, 23, 5);
        public static readonly GameAttributeB Attack_Slow = new(1069, 0, -1, 0, 0, "", "", "Attack_Slow", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Power_Disabled = new(1070, 0, -1, 0, 0, "", "", "Power_Disabled", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Weapon_Effect_Override = new(1071, 0, -1, 0, 0, "", "", "Weapon_Effect_Override", GameAttributeEncoding.Int, 0, 0, 14, 4);
        public static readonly GameAttributeB Uses_PvP_Power_Tags = new(1073, 0, -1, 0, 0, "", "", "Uses_PvP_Power_Tags", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Trait = new(1074, 0, -1, 0, 0, "", "", "Trait", GameAttributeEncoding.Int, 0, -1, 30, 5);
        public static readonly GameAttributeB Power_Saved_Attribute = new(1078, 0, -1, 0, 0, "", "", "Power_Saved_Attribute", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Looping_Animation_Suppress_Item_Tooltips = new(1082, 0, -1, 0, 0, "", "", "Looping_Animation_Suppress_Item_Tooltips", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB No_Health_Drop = new(1097, 0, -1, 0, 0, "", "", "No_Health_Drop", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Leader = new(1098, 0, -1, 0, 0, "", "", "Leader", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB IsContentRestrictedActor = new(1099, 0, -1, 0, 0, "", "", "IsContentRestrictedActor", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB InBossEncounter = new(1100, 0, -1, 0, 0, "", "", "InBossEncounter", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB God = new(1101, 0, -1, 0, 0, "", "", "God", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB AllowSkillChanges = new(1102, 0, -1, 0, 0, "", "", "AllowSkillChanges", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB MinimapActive = new(1103, 0, -1, 1, 1, "", "", "MinimapActive", GameAttributeEncoding.IntMinMax, 31, 0, 1, 1);
        public static readonly GameAttributeB MinimapDisableArrow = new(1105, 0, -1, 0, 0, "", "", "MinimapDisableArrow", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Weapons_Hidden = new(1109, 0, -1, 0, 0, "", "", "Weapons_Hidden", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Main_Hand_Weapon_Hidden = new(1110, 0, -1, 0, 0, "", "", "Main_Hand_Weapon_Hidden", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Off_Hand_Weapon_Hidden = new(1111, 0, -1, 0, 0, "", "", "Off_Hand_Weapon_Hidden", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Actor_Updates_Attributes_From_Owner = new(1112, 0, -1, 0, 0, "", "", "Actor_Updates_Attributes_From_Owner", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB CannotDieDuring = new(1139, 0, -1, 0, 0, "", "", "CannotDieDuring", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Item_Indestructible = new(1215, 0, -1, 0, 0, "", "", "Item_Indestructible", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Player_All_Items_Indestructible = new(1216, 0, -1, 0, 0, "", "", "Player_All_Items_Indestructible", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Waiting_To_Accept_Resurrection = new(1218, 0, -1, 0, 0, "", "", "Waiting_To_Accept_Resurrection", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Ghosted = new(1219, 0, -1, 0, 0, "", "", "Ghosted", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Special_Inventory_Index = new(1221, -1, -1, 0, 0, "", "", "Special_Inventory_Index", GameAttributeEncoding.Int, 0, -1, 31, 6);
        public static readonly GameAttributeB Never_Deactivates = new(1259, 0, -1, 0, 0, "", "", "Never_Deactivates", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Deactivate_Lure = new(1108, 0, -1, 0, 0, "", "", "DeactivateLure", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Account_Under_Review = new(1260, 0, -1, 0, 0, "", "", "Account_Under_Review", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Projectile_Uncapped_Lifetime = new(1262, 0, -1, 0, 0, "", "", "Projectile_Uncapped_Lifetime", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI PVP_Rank = new(1274, 0, -1, 0, 0, "", "", "PVP_Rank", GameAttributeEncoding.Int, 0, -1, 100, 7);
        public static readonly GameAttributeI PVP_Level_Equalizer_Level = new(1284, 0, -1, 0, 0, "", "", "PVP_Level_Equalizer_Level", GameAttributeEncoding.Int, 0, -1, 70, 7);
        public static readonly GameAttributeB Is_Temporary_Lure = new(1285, 1, -1, 0, 0, "", "", "Is_Temporary_Lure", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Ignore_Lure = new(1286, 0, -1, 0, 0, "", "", "Ignore_Lure", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Elite_Engaged = new(1288, 0, -1, 0, 0, "", "", "Elite_Engaged", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Charmed = new(1299, 0, -1, 0, 0, "", "", "Charmed", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Taunted = new(1300, 0, -1, 0, 0, "", "", "Taunted", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Dueling = new(1301, 0, -1, 0, 0, "", "", "Dueling", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB PVP_Player_Revealed_On_Map = new(1302, 0, -1, 0, 0, "", "", "PVP_Player_Revealed_On_Map", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Received_Seasonal_Legendary = new(1305, 0, -1, 0, 0, "", "", "Received_Seasonal_Legendary", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Has_Dropped_Special_loot = new(1306, 0, -1, 0, 0, "", "", "Has_Dropped_Special_loot", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Scroll_Buff = new(1307, 0, -1, 0, 0, "", "", "Scroll_Buff", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Buff_Exclusive_Type_Active = new(1308, 0, -1, 0, 0, "", "", "Buff_Exclusive_Type_Active", GameAttributeEncoding.IntMinMax, 136, 0, 1, 1);
        public static readonly GameAttributeB In_Combat_With_Player = new(1309, 0, -1, 0, 0, "", "", "In_Combat_With_Player", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Allow_2H_And_Shield = new(1312, 0, -1, 0, 0, "", "", "Allow_2H_And_Shield", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Item_Is_BOE = new(1321, 0, -1, 0, 0, "", "", "Item_Is_BOE", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB AlwaysShowFloatingNumbers = new(1333, 0, -1, 0, 0, "", "", "AlwaysShowFloatingNumbers", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Supress_Thorns_Effect = new(1335, 0, -1, 0, 0, "", "", "Supress_Thorns_Effect", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Force_Gripped = new(1340, 0, -1, 0, 0, "", "", "Force_Gripped", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Rune_A_Override = new(1347, 0, -1, 0, 0, "", "", "Rune_A_Override", GameAttributeEncoding.Int, 0, 0, 255, 8);
        public static readonly GameAttributeI Rune_B_Override = new(1348, 0, -1, 0, 0, "", "", "Rune_B_Override", GameAttributeEncoding.Int, 0, 0, 255, 8);
        public static readonly GameAttributeI Rune_C_Override = new(1349, 0, -1, 0, 0, "", "", "Rune_C_Override", GameAttributeEncoding.Int, 0, 0, 255, 8);
        public static readonly GameAttributeI Rune_D_Override = new(1350, 0, -1, 0, 0, "", "", "Rune_D_Override", GameAttributeEncoding.Int, 0, 0, 255, 8);
        public static readonly GameAttributeI Rune_E_Override = new(1351, 0, -1, 0, 0, "", "", "Rune_E_Override", GameAttributeEncoding.Int, 0, 0, 255, 8);
        public static readonly GameAttributeB Item_Equipped_But_Disabled = new(1357, 0, -1, 0, 0, "", "", "Item_Equipped_But_Disabled", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Item_Equipped_But_Disabled_Duplicate_Legendary = new(1358, 0, -1, 0, 0, "", "", "Item_Equipped_But_Disabled_Duplicate_Legendary", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Attribute_Projectile_Pass_Through = new(1359, 0, -1, 0, 0, "", "", "Attribute_Projectile_Pass_Through", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Attribute_Set_Item_Discount = new(1360, 0, -1, 0, 0, "", "", "Attribute_Set_Item_Discount", GameAttributeEncoding.Int, 0, 0, 255, 8);
        public static readonly GameAttributeB Has_Infinite_Shrine_Buffs = new(1363, 0, -1, 0, 0, "", "", "Has_Infinite_Shrine_Buffs", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Dont_Update_Camera_While_Attached = new(1366, 0, -1, 0, 0, "", "", "Dont_Update_Camera_While_Attached", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Boost_TC_Index = new(1368, 0, -1, 0, 0, "", "", "Boost_TC_Index", GameAttributeEncoding.Int, 0, 0, 31, 5);
        public static readonly GameAttributeB Bounty_Objective = new(1382, 0, -1, 0, 0, "", "", "Bounty_Objective", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Illusion = new(1383, 0, -1, 0, 0, "", "", "Illusion", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Prevent_Evade_During = new(1385, 0, -1, 0, 0, "", "", "Prevent_Evade_During", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Heavens_Fury_Attacker = new(1388, -1, -1, 0, 0, "", "", "Heavens_Fury_Attacker", GameAttributeEncoding.Int, 0, -1, 7, 4);
        public static readonly GameAttributeB Resurrected = new(1393, 0, -1, 0, 0, "", "", "Resurrected", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Movement_Destroys_Waller_Walls = new(1396, 0, -1, 0, 0, "", "", "Movement_Destroys_Waller_Walls", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Mail_Flag_Icon = new(1397, 0, -1, 0, 0, "", "", "Mail_Flag_Icon", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Is_Loot_Run_Boss = new(1400, 0, -1, 0, 0, "", "", "Is_Loot_Run_Boss", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Item_Console_Max_Level = new(1404, 0, -1, 0, 0, "0", "", "Item_Console_Max_Level", GameAttributeEncoding.Int, 0, 0, 70, 7);
        public static readonly GameAttributeB Console_Promo_Item = new(1405, 0, -1, 0, 0, "", "", "Console_Promo_Item", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Double_BloodShards = new(1406, 0, -1, 0, 0, "", "", "Double_BloodShards", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Double_BountyBags = new(1407, 0, -1, 0, 0, "", "", "Double_BountyBags", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Item_Ignores_Pickup_Radius_For_Pickup = new(1411, 0, -1, 0, 0, "", "", "Item_Ignores_Pickup_Radius_For_Pickup", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Hunter = new(1412, 0, -1, 0, 0, "", "", "Hunter", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Participating_In_Tiered_Loot_Run = new(1413, 0, -1, 0, 0, "", "", "Participating_In_Tiered_Loot_Run", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI HQ_Hot_Cold_State = new(1425, -1, -1, 0, 0, "", "", "HQ_Hot_Cold_State", GameAttributeEncoding.Int, 0, -1, 2, 2);
        public static readonly GameAttributeB Debug_Movement_Type = new(1428, 0, -1, 0, 0, "", "", "Debug_Movement_Type", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeI Stash_Tabs_Purchased_With_Gold = new(1438, 0, -1, 0, 0, "", "", "Stash_Tabs_Purchased_With_Gold", GameAttributeEncoding.Int, 0, 0, 5, 3);
        public static readonly GameAttributeB Skill_Button_Flash = new(1440, 0, -1, 0, 0, "", "", "Skill_Button_Flash", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Skill_Button_Active_Glow = new(1445, 0, -1, 0, 0, "", "", "Skill_Button_Active_Glow", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Participating_In_Set_Dungeon = new(1446, 0, -1, 0, 0, "", "", "Participating_In_Set_Dungeon", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB In_Set_Dungeon_World = new(1450, 0, -1, 0, 0, "", "", "In_Set_Dungeon_World", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Summoned_By_Autocast = new(1455, 0, -1, 0, 0, "", "", "Summoned_By_Autocast", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Necromancer_Corpse_Free_Casting = new(1462, 0, -1, 0, 0, "", "", "Necromancer_Corpse_Free_Casting", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Weekly_Challenge_Reward_Icon = new(1470, 0, -1, 0, 0, "", "", "Weekly_Challenge_Reward_Icon", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Item_Was_Touched_By_Armory = new(1471, 0, -1, 0, 0, "", "", "Item_Was_Touched_By_Armory", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Item_Was_Touched_By_Armory_Last_Game = new(1472, 0, -1, 0, 0, "", "", "Item_Was_Touched_By_Armory_Last_Game", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Has_Nfp_Device = new(1473, 0, -1, 0, 0, "", "", "Has_Nfp_Device", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);




        public static readonly GameAttributeF Damage_Percent_Bonus_Barbarian = new(245, 0, -1, 0, 0, "", "", "Damage_Percent_Bonus_Barbarian", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Percent_Bonus_Crusader = new(246, 0, -1, 0, 0, "", "", "Damage_Percent_Bonus_Crusader", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Percent_Bonus_Demonhunter = new(247, 0, -1, 0, 0, "", "", "Damage_Percent_Bonus_Demonhunter", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Percent_Bonus_Monk = new(248, 0, -1, 0, 0, "", "", "Damage_Percent_Bonus_Monk", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Percent_Bonus_Necromancer = new(249, 0, -1, 0, 0, "", "", "Damage_Percent_Bonus_Necromancer", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF QuestRange = new(443, -1, -1, 0, 0, "", "", "QuestRange", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Quest_MonsterEffect = new(453, -1, -1, 0, 0, "", "", "Quest_MonsterEffect", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF StoreSNO = new(845, 0, -1, 0, 0, "", "", "StoreSNO", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF LastActionTimestamp = new(849, 0, -1, 0, 0, "", "", "LastActionTimestamp", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF PortalNextTime = new(850, 0, -1, 0, 0, "", "", "PortalNextTime", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF ClientOnlyEffect = new(1077, -1, -1, 0, 0, "", "", "ClientOnlyEffect", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF UnequippedTime = new(1137, 1, -1, 0, 0, "", "", "UnequippedTime", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF PowerBonusAttackRadius = new(1341, 0, -1, 0, 0, "", "", "PowerBonusAttackRadius", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF LinkedDynamicEntranceGUID = new(1367, 0, -1, 0, 0, "", "", "LinkedDynamicEntranceGUID", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Damage_Done_Reduction_Percent = new(1065, 0, -1, 0, 0, "", "", "Max(Damage_Done_Reduction_Percent,1)", GameAttributeEncoding.Float16, 0, 0, 0, 16);

        public static readonly GameAttributeB DestroyWhenPathBlocked = new(368, 0, -1, 0, 0, "", "", "DestroyWhenPathBlocked", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB AlphaAttachments = new(441, 0, -1, 0, 0, "", "", "AlphaAttachments", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB QueueDeath = new(675, 0, -1, 0, 0, "", "", "QueueDeath", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB LorePlaying = new(848, 0, -1, 0, 0, "", "", "LorePlaying", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB ForcedMove = new(1401, 0, -1, 0, 0, "", "", "ForcedMove", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB ReceivedPrimalWhenUnlocking = new(1474, 0, -1, 0, 0, "", "", "ReceivedPrimalWhenUnlocking", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB KanaiPowersunlocked = new(1475, 0, -1, 0, 0, "", "", "KanaiPowersunlocked", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB FourthKanaisCubeSlotunlocked = new(1476, 0, -1, 0, 0, "", "", "FourthKanai'sCubeSlotunlocked", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Seasononlyitemsunlocked = new(1477, 0, -1, 0, 0, "", "", "Season-onlyitemsunlocked", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Soul_shards_unlocked = new(1478, 0, -1, 0, 0, "", "", "Soulshardsunlocked", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Item_was_sanctified = new(1479, 0, -1, 0, 0, "", "", "Itemwassanctified", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);
        public static readonly GameAttributeB Sanctified_items_unlocked = new(1480, 0, -1, 0, 0, "", "", "Sanctifieditemsunlocked", GameAttributeEncoding.IntMinMax, 0, 0, 1, 1);

        public static readonly GameAttributeF Fiil1 = new(1223, -1, -1, 0, 0, "", "", "Fiil1", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        public static readonly GameAttributeF Fiil2 = new(1224, -1, -1, 0, 0, "", "", "Fiil2", GameAttributeEncoding.Float32, 0, 0, 0, 32);
        
        //*/
        #endregion
    }
}
